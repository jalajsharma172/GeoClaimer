{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Territory Walker - Geospatial Tracking Application\n\n## Project Overview\nTerritory Walker is a geospatial tracking application that enables users to log, visualize, and analyze their geographical interactions and claims. Users can walk around, track their paths, claim areas, and complete circles for achievements.\n\n## Architecture\n- **Frontend**: React with TypeScript using Vite\n- **Backend**: Express.js with TypeScript\n- **Database**: PostgreSQL with Drizzle ORM\n- **Mapping**: Leaflet for interactive maps\n- **Styling**: Tailwind CSS with shadcn/ui components\n- **State Management**: TanStack React Query for server state\n\n## Core Features\n\n### User Authentication\n- Username/email login or anonymous guest access\n- User data persistence across sessions using localStorage\n\n### Location Tracking\n- Real-time GPS position tracking with accuracy monitoring\n- Path recording with timestamp and accuracy data\n- Visual feedback for GPS accuracy issues\n\n### Path Management\n- Active path tracking during user movement\n- Previous path visualization on map reload\n- Path saving with length and area calculations\n- Historical path data retrieval by username\n\n### Map Visualization\n- Interactive Leaflet map with real-time position updates\n- Different visual styles for active vs completed paths\n- User path overlays showing travel history\n- Claims and completed circles visualization\n\n### Area Claiming\n- 10-meter radius circular area claiming system\n- Overlap detection to prevent duplicate claims\n- User territory statistics and leaderboards\n\n### Circle Completion\n- Detection of completed 10-meter circles during walking\n- Achievement tracking with completion time\n- Circle visualization on map\n\n## Recent Changes (2025-08-03)\n\n### User Path History Feature\n- **Added getUserPathsByUsername method** in DatabaseStorage class\n- **Created API endpoint** `/api/user-paths/username/:username` for fetching historical paths\n- **Enhanced MapView component** to fetch and display all user paths on login/reload\n- **Visual distinction** between active paths (blue) and completed paths (gray)\n- **Path information popups** showing length, area, points count, and creation date\n\n### New Area Calculation Formula\n- **Implemented claimed area formula**: `Area = (distance * 2 * r) + (π * r²)`\n- **Updated calculateClaimedArea function** in geometry utilities\n- **Modified location tracker** to use new formula for real-time area calculation\n- **Enhanced total area tracking** with corridor and circular end cap calculations\n- **Formula parameters**: r = 10 meters (path radius), distance = total path length\n\n### Database Schema\n- **userPaths table** stores path data with JSON point arrays\n- **Foreign key relationships** link paths to users\n- **isActive field** distinguishes between current and historical paths\n\n### Frontend Improvements\n- **Real-time path fetching** when map loads\n- **Historical path rendering** with different visual styles\n- **Path popup information** with detailed statistics\n- **Error handling** for malformed path data\n\n## User Preferences\n- Users want to see their previous traveled paths when logging in with the same username\n- Paths should be visually distinct between active and completed states\n- Path information should be accessible via map popups\n\n## Technical Implementation Details\n\n### Path Data Structure\n```typescript\n{\n  lat: number,\n  lng: number, \n  timestamp: number,\n  accuracy?: number\n}\n```\n\n### API Endpoints\n- `GET /api/user-paths/user/:userId` - Get paths by user ID\n- `GET /api/user-paths/username/:username` - Get paths by username\n- `GET /api/user-paths/active/:userId` - Get active path for user\n- `POST /api/user-paths` - Create new path\n- `PUT /api/user-paths/:id` - Update existing path\n\n### Known Issues\n- Foreign key constraint violations when creating paths for non-existent users\n- LSP diagnostics in drizzle.config.ts need attention\n\n## Next Steps\n- Resolve foreign key constraint issues\n- Implement proper user session management\n- Add path filtering and search capabilities\n- Enhance mobile GPS accuracy handling","size_bytes":4068},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"test_area_calculation.js":{"content":"// Test script to verify the new area calculation formula\n// Formula: Area = (distance * 2 * r) + (π * r²)\n// Where r = 10 meters (radius), distance = path length\n\nfunction calculateClaimedArea(pathLength, radius = 10) {\n  // Area = (distance * 2 * r) + (π * r²)\n  const rectangularArea = pathLength * 2 * radius; // Path corridor area\n  const circularArea = Math.PI * radius * radius; // End caps area\n  return rectangularArea + circularArea;\n}\n\n// Test cases\nconsole.log(\"=== Area Calculation Test Results ===\");\n\n// Test 1: 100m path with 10m radius\nconst path1 = 100; // 100 meters\nconst area1 = calculateClaimedArea(path1);\nconsole.log(`Path length: ${path1}m`);\nconsole.log(`Claimed area: ${Math.round(area1)} m²`);\nconsole.log(`Breakdown: Corridor (${path1 * 2 * 10}) + End caps (${Math.round(Math.PI * 10 * 10)}) = ${Math.round(area1)}`);\nconsole.log(\"\");\n\n// Test 2: 500m path with 10m radius  \nconst path2 = 500; // 500 meters\nconst area2 = calculateClaimedArea(path2);\nconsole.log(`Path length: ${path2}m`);\nconsole.log(`Claimed area: ${Math.round(area2)} m²`);\nconsole.log(`Breakdown: Corridor (${path2 * 2 * 10}) + End caps (${Math.round(Math.PI * 10 * 10)}) = ${Math.round(area2)}`);\nconsole.log(\"\");\n\n// Test 3: 1km path with 10m radius\nconst path3 = 1000; // 1000 meters\nconst area3 = calculateClaimedArea(path3);\nconsole.log(`Path length: ${path3}m`);\nconsole.log(`Claimed area: ${Math.round(area3)} m²`);\nconsole.log(`Breakdown: Corridor (${path3 * 2 * 10}) + End caps (${Math.round(Math.PI * 10 * 10)}) = ${Math.round(area3)}`);\nconsole.log(\"\");\n\nconsole.log(\"=== Formula Verification ===\");\nconsole.log(\"Formula: Area = (distance * 2 * r) + (π * r²)\");\nconsole.log(\"Where:\");\nconsole.log(\"- distance = path length in meters\");\nconsole.log(\"- r = 10 meters (path radius)\");\nconsole.log(\"- π * r² = circular end caps area ≈ 314 m²\");\nconsole.log(\"- distance * 2 * r = rectangular corridor area\");","size_bytes":1928},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool } from 'pg';\nimport { drizzle } from 'drizzle-orm/node-postgres';\nimport * as schema from \"@shared/schema\";\n\n// Construct DATABASE_URL from individual PG environment variables if available\nlet databaseUrl = process.env.DATABASE_URL;\n\nif (process.env.PGHOST && process.env.PGUSER && process.env.PGPASSWORD && process.env.PGDATABASE && process.env.PGPORT) {\n  databaseUrl = `postgresql://${process.env.PGUSER}:${process.env.PGPASSWORD}@${process.env.PGHOST}:${process.env.PGPORT}/${process.env.PGDATABASE}?sslmode=require`;\n  console.log(\"Using constructed DATABASE_URL from PG environment variables with SSL\");\n}\n\nif (!databaseUrl) {\n  throw new Error(\n    \"DATABASE_URL must be set or PG* environment variables must be available. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ \n  connectionString: databaseUrl,\n  ssl: { rejectUnauthorized: false }\n});\nexport const db = drizzle(pool, { schema });","size_bytes":944},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen(port, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2013},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertUserSchema, insertClaimSchema, insertCompletedCircleSchema, insertUserPathSchema, insertMapViewPreferencesSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nconst loginSchema = z.object({\n  email: z.string().optional().refine((val) => !val || val === \"\" || z.string().email().safeParse(val).success, {\n    message: \"Invalid email format\"\n  }),\n  username: z.string().min(1),\n  isAnonymous: z.boolean().default(false),\n});\n\nconst claimSchema = insertClaimSchema.extend({\n  district: z.string().optional().nullable(),\n  city: z.string().optional().nullable(),\n  country: z.string().optional().nullable(),\n}).transform((data) => ({\n  ...data,\n  district: data.district || undefined,\n  city: data.city || undefined,\n  country: data.country || undefined,\n}));\n\nconst userPathSchema = insertUserPathSchema.extend({\n  district: z.string().optional().nullable(),\n  city: z.string().optional().nullable(),\n  country: z.string().optional().nullable(),\n}).transform((data) => ({\n  ...data,\n  district: data.district || undefined,\n  city: data.city || undefined,\n  country: data.country || undefined,\n}));\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Authentication endpoints\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      console.log(\"Login request body:\", req.body);\n      const { email, username, isAnonymous } = loginSchema.parse(req.body);\n      \n      let user;\n      if (email && email.trim() !== \"\" && !isAnonymous) {\n        user = await storage.getUserByEmail(email);\n        if (!user) {\n          user = await storage.createUser({\n            email,\n            username,\n            isAnonymous: 0,\n          });\n        }\n      } else {\n        // Anonymous user\n        user = await storage.createUser({\n          username,\n          isAnonymous: 1,\n        });\n      }\n      \n      res.json({ user });\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      } else {\n        const errorMessage = error instanceof Error ? error.message : \"Unknown error\";\n        res.status(500).json({ message: \"Server error\", error: errorMessage });\n      }\n    }\n  });\n\n  // User endpoints\n  app.get(\"/api/users/:id\", async (req, res) => {\n    try {\n      const user = await storage.getUser(req.params.id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json({ user });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get user\" });\n    }\n  });\n\n  app.put(\"/api/users/:id\", async (req, res) => {\n    try {\n      const updates = req.body;\n      const user = await storage.updateUser(req.params.id, updates);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json({ user });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update user\" });\n    }\n  });\n\n  app.put(\"/api/users/:id\", async (req, res) => {\n    try {\n      const updates = req.body;\n      const user = await storage.updateUser(req.params.id, updates);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json({ user });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update user\" });\n    }\n  });\n\n  // Claims endpoints\n  app.get(\"/api/claims\", async (req, res) => {\n    try {\n      const claims = await storage.getAllClaims();\n      res.json({ claims });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get claims\" });\n    }\n  });\n\n  app.get(\"/api/claims/user/:userId\", async (req, res) => {\n    try {\n      const claims = await storage.getClaimsByUser(req.params.userId);\n      res.json({ claims });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get user claims\" });\n    }\n  });\n\n  app.post(\"/api/claims\", async (req, res) => {\n    try {\n      const claimData = claimSchema.parse(req.body);\n      const claim = await storage.createClaim(claimData);\n      res.json({ claim });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid claim data\" });\n    }\n  });\n\n  // Completed Circles endpoints\n  app.get(\"/api/completed-circles\", async (req, res) => {\n    try {\n      const completedCircles = await storage.getAllCompletedCircles();\n      res.json({ completedCircles });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get completed circles\" });\n    }\n  });\n\n  app.get(\"/api/completed-circles/user/:userId\", async (req, res) => {\n    try {\n      const completedCircles = await storage.getCompletedCirclesByUser(req.params.userId);\n      res.json({ completedCircles });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get user completed circles\" });\n    }\n  });\n\n  app.post(\"/api/completed-circles\", async (req, res) => {\n    try {\n      const completedCircleData = insertCompletedCircleSchema.parse(req.body);\n      const completedCircle = await storage.createCompletedCircle(completedCircleData);\n      res.json({ completedCircle });\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid completed circle data\" });\n    }\n  });\n\n  // User Path endpoints\n  app.get(\"/api/user-paths\", async (req, res) => {\n    try {\n      const userPaths = await storage.getAllUserPaths();\n      res.json({ userPaths });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get user paths\" });\n    }\n  });\n\n  app.get(\"/api/user-paths/user/:userId\", async (req, res) => {\n    try {\n      const userPaths = await storage.getUserPaths(req.params.userId);\n      res.json({ userPaths });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get user paths\" });\n    }\n  });\n\n  app.get(\"/api/user-paths/username/:username\", async (req, res) => {\n    try {\n      const userPaths = await storage.getUserPathsByUsername(req.params.username);\n      res.json({ userPaths });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get user paths by username\" });\n    }\n  });\n\n  app.get(\"/api/user-paths/active/:userId\", async (req, res) => {\n    try {\n      const activePath = await storage.getActiveUserPath(req.params.userId);\n      res.json({ activePath });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get active user path\" });\n    }\n  });\n\n  app.post(\"/api/user-paths\", async (req, res) => {\n    try {\n      const userPathData = userPathSchema.parse(req.body);\n      const userPath = await storage.createUserPath(userPathData);\n      res.json({ userPath });\n    } catch (error) {\n      console.error(\"Path creation error:\", error);\n      res.status(400).json({ message: \"Invalid user path data\" });\n    }\n  });\n\n  app.put(\"/api/user-paths/:id\", async (req, res) => {\n    try {\n      const updates = req.body;\n      const userPath = await storage.updateUserPath(req.params.id, updates);\n      if (!userPath) {\n        return res.status(404).json({ message: \"User path not found\" });\n      }\n      res.json({ userPath });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update user path\" });\n    }\n  });\n\n  // Leaderboard endpoints\n  app.get(\"/api/leaderboard/:scope/:location\", async (req, res) => {\n    try {\n      const { scope, location } = req.params;\n      if (!['district', 'city', 'country'].includes(scope)) {\n        return res.status(400).json({ message: \"Invalid scope\" });\n      }\n      \n      const leaderboard = await storage.getLeaderboard(\n        scope as 'district' | 'city' | 'country',\n        decodeURIComponent(location)\n      );\n      res.json({ leaderboard });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get leaderboard\" });\n    }\n  });\n\n  app.get(\"/api/leaderboard/:scope/:location/rank/:userId\", async (req, res) => {\n    try {\n      const { scope, location, userId } = req.params;\n      if (!['district', 'city', 'country'].includes(scope)) {\n        return res.status(400).json({ message: \"Invalid scope\" });\n      }\n      \n      const rank = await storage.getUserRank(\n        userId,\n        scope as 'district' | 'city' | 'country',\n        decodeURIComponent(location)\n      );\n      res.json({ rank });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get user rank\" });\n    }\n  });\n\n  // MapView preferences endpoints\n  app.get(\"/api/map-preferences/:userId\", async (req, res) => {\n    try {\n      const preferences = await storage.getMapViewPreferences(req.params.userId);\n      res.json({ preferences });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get map preferences\" });\n    }\n  });\n\n  app.post(\"/api/map-preferences\", async (req, res) => {\n    try {\n      const preferencesData = insertMapViewPreferencesSchema.parse(req.body);\n      const preferences = await storage.createMapViewPreferences(preferencesData);\n      res.json({ preferences });\n    } catch (error) {\n      console.error(\"Map preferences creation error:\", error);\n      res.status(400).json({ message: \"Invalid map preferences data\" });\n    }\n  });\n\n  app.put(\"/api/map-preferences/:userId\", async (req, res) => {\n    try {\n      const updates = req.body;\n      const preferences = await storage.updateMapViewPreferences(req.params.userId, updates);\n      if (!preferences) {\n        return res.status(404).json({ message: \"Map preferences not found\" });\n      }\n      res.json({ preferences });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update map preferences\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":9777},"server/storage.ts":{"content":"import { type User, type InsertUser, type Claim, type InsertClaim, type CompletedCircle, type InsertCompletedCircle, type UserPath, type InsertUserPath, type MapViewPreferences, type InsertMapViewPreferences } from \"@shared/schema\";\n// Database storage implementation using Drizzle ORM\nimport { users, claims, completedCircles, userPaths, mapViewPreferences } from \"@shared/schema\";\nimport { eq, desc } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User | undefined>;\n  \n  // Claim operations\n  getClaim(id: string): Promise<Claim | undefined>;\n  getClaimsByUser(userId: string): Promise<Claim[]>;\n  getAllClaims(): Promise<Claim[]>;\n  createClaim(claim: InsertClaim): Promise<Claim>;\n  \n  // User Path operations\n  getUserPath(id: string): Promise<UserPath | undefined>;\n  getUserPaths(userId: string): Promise<UserPath[]>;\n  getUserPathsByUsername(username: string): Promise<UserPath[]>;\n  getActiveUserPath(userId: string): Promise<UserPath | undefined>;\n  getAllUserPaths(): Promise<UserPath[]>;\n  createUserPath(userPath: InsertUserPath): Promise<UserPath>;\n  updateUserPath(id: string, updates: Partial<UserPath>): Promise<UserPath | undefined>;\n  \n  // Completed Circle operations\n  getCompletedCircle(id: string): Promise<CompletedCircle | undefined>;\n  getCompletedCirclesByUser(userId: string): Promise<CompletedCircle[]>;\n  getAllCompletedCircles(): Promise<CompletedCircle[]>;\n  createCompletedCircle(completedCircle: InsertCompletedCircle): Promise<CompletedCircle>;\n  \n  // Leaderboard operations\n  getLeaderboard(scope: 'district' | 'city' | 'country', location: string): Promise<User[]>;\n  getUserRank(userId: string, scope: 'district' | 'city' | 'country', location: string): Promise<number>;\n  \n  // MapView preferences operations\n  getMapViewPreferences(userId: string): Promise<MapViewPreferences | undefined>;\n  createMapViewPreferences(preferences: InsertMapViewPreferences): Promise<MapViewPreferences>;\n  updateMapViewPreferences(userId: string, updates: Partial<MapViewPreferences>): Promise<MapViewPreferences | undefined>;\n}\n\n// MapView preferences operations added to interface and implemented below\n\nimport { db } from \"./db\";\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const [user] = await db\n      .update(users)\n      .set(updates)\n      .where(eq(users.id, id))\n      .returning();\n    return user || undefined;\n  }\n\n  async getClaim(id: string): Promise<Claim | undefined> {\n    const [claim] = await db.select().from(claims).where(eq(claims.id, id));\n    return claim || undefined;\n  }\n\n  async getClaimsByUser(userId: string): Promise<Claim[]> {\n    return await db.select().from(claims).where(eq(claims.userId, userId)).orderBy(desc(claims.createdAt));\n  }\n\n  async getAllClaims(): Promise<Claim[]> {\n    return await db.select().from(claims).orderBy(desc(claims.createdAt));\n  }\n\n  async createClaim(insertClaim: InsertClaim): Promise<Claim> {\n    const [claim] = await db.insert(claims).values(insertClaim).returning();\n\n    // Update user's total area and claims count\n    const user = await this.getUser(insertClaim.userId);\n    if (user) {\n      await this.updateUser(user.id, {\n        totalArea: (user.totalArea || 0) + insertClaim.area,\n        totalClaims: (user.totalClaims || 0) + 1,\n      });\n    }\n\n    return claim;\n  }\n\n  async getUserPath(id: string): Promise<UserPath | undefined> {\n    const [userPath] = await db.select().from(userPaths).where(eq(userPaths.id, id));\n    return userPath || undefined;\n  }\n\n  async getUserPaths(userId: string): Promise<UserPath[]> {\n    return await db.select().from(userPaths).where(eq(userPaths.userId, userId)).orderBy(desc(userPaths.createdAt));\n  }\n\n  async getUserPathsByUsername(username: string): Promise<UserPath[]> {\n    return await db.select().from(userPaths).where(eq(userPaths.username, username)).orderBy(desc(userPaths.createdAt));\n  }\n\n  async getActiveUserPath(userId: string): Promise<UserPath | undefined> {\n    const [userPath] = await db.select().from(userPaths).where(eq(userPaths.userId, userId));\n    return userPath?.isActive === 1 ? userPath : undefined;\n  }\n\n  async getAllUserPaths(): Promise<UserPath[]> {\n    return await db.select().from(userPaths).orderBy(desc(userPaths.createdAt));\n  }\n\n  async createUserPath(insertUserPath: InsertUserPath): Promise<UserPath> {\n    const [userPath] = await db.insert(userPaths).values(insertUserPath).returning();\n\n    // Update user's total path length and area\n    const user = await this.getUser(insertUserPath.userId);\n    if (user) {\n      await this.updateUser(user.id, {\n        totalPathLength: (user.totalPathLength || 0) + (insertUserPath.pathLength || 0),\n        totalArea: (user.totalArea || 0) + (insertUserPath.area || 0),\n      });\n    }\n\n    return userPath;\n  }\n\n  async updateUserPath(id: string, updates: Partial<UserPath>): Promise<UserPath | undefined> {\n    const existingPath = await this.getUserPath(id);\n    if (!existingPath) return undefined;\n\n    const [updatedPath] = await db\n      .update(userPaths)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(userPaths.id, id))\n      .returning();\n\n    // Update user's total area if area changed\n    if (updates.area !== undefined || updates.pathLength !== undefined) {\n      const user = await this.getUser(existingPath.userId);\n      if (user) {\n        const oldArea = existingPath.area || 0;\n        const newArea = updatedPath.area || 0;\n        const oldLength = existingPath.pathLength || 0;\n        const newLength = updatedPath.pathLength || 0;\n        \n        await this.updateUser(user.id, {\n          totalArea: (user.totalArea || 0) - oldArea + newArea,\n          totalPathLength: (user.totalPathLength || 0) - oldLength + newLength,\n        });\n      }\n    }\n\n    return updatedPath || undefined;\n  }\n\n  async getCompletedCircle(id: string): Promise<CompletedCircle | undefined> {\n    const [circle] = await db.select().from(completedCircles).where(eq(completedCircles.id, id));\n    return circle || undefined;\n  }\n\n  async getCompletedCirclesByUser(userId: string): Promise<CompletedCircle[]> {\n    return await db.select().from(completedCircles).where(eq(completedCircles.userId, userId)).orderBy(desc(completedCircles.createdAt));\n  }\n\n  async getAllCompletedCircles(): Promise<CompletedCircle[]> {\n    return await db.select().from(completedCircles).orderBy(desc(completedCircles.createdAt));\n  }\n\n  async createCompletedCircle(insertCompletedCircle: InsertCompletedCircle): Promise<CompletedCircle> {\n    const [completedCircle] = await db.insert(completedCircles).values(insertCompletedCircle).returning();\n\n    // Update user's total area and completed circles count\n    const user = await this.getUser(insertCompletedCircle.userId);\n    if (user) {\n      await this.updateUser(user.id, {\n        totalArea: (user.totalArea || 0) + insertCompletedCircle.area,\n        totalCompletedCircles: (user.totalCompletedCircles || 0) + 1,\n      });\n    }\n\n    return completedCircle;\n  }\n\n  async getLeaderboard(scope: 'district' | 'city' | 'country', location: string): Promise<User[]> {\n    let whereCondition;\n    switch (scope) {\n      case 'district':\n        whereCondition = eq(users.district, location);\n        break;\n      case 'city':\n        whereCondition = eq(users.city, location);\n        break;\n      case 'country':\n        whereCondition = eq(users.country, location);\n        break;\n    }\n\n    return await db\n      .select()\n      .from(users)\n      .where(whereCondition)\n      .orderBy(desc(users.totalArea))\n      .limit(50);\n  }\n\n  async getUserRank(userId: string, scope: 'district' | 'city' | 'country', location: string): Promise<number> {\n    const leaderboard = await this.getLeaderboard(scope, location);\n    const userIndex = leaderboard.findIndex(user => user.id === userId);\n    return userIndex >= 0 ? userIndex + 1 : -1;\n  }\n\n  async getMapViewPreferences(userId: string): Promise<MapViewPreferences | undefined> {\n    const [preferences] = await db.select().from(mapViewPreferences).where(eq(mapViewPreferences.userId, userId));\n    return preferences || undefined;\n  }\n\n  async createMapViewPreferences(insertPreferences: InsertMapViewPreferences): Promise<MapViewPreferences> {\n    const [preferences] = await db.insert(mapViewPreferences).values(insertPreferences).returning();\n    return preferences;\n  }\n\n  async updateMapViewPreferences(userId: string, updates: Partial<MapViewPreferences>): Promise<MapViewPreferences | undefined> {\n    const [preferences] = await db\n      .update(mapViewPreferences)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(mapViewPreferences.userId, userId))\n      .returning();\n    return preferences || undefined;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":9581},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, real, timestamp, integer } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\"),\n  username: text(\"username\").notNull(),\n  \n  isAnonymous: integer(\"is_anonymous\").default(0),\n  totalArea: real(\"total_area\").default(0),\n  totalClaims: integer(\"total_claims\").default(0),\n  totalCompletedCircles: integer(\"total_completed_circles\").default(0),\n  totalPathLength: real(\"total_path_length\").default(0),\n  district: text(\"district\"),\n  city: text(\"city\"),\n  country: text(\"country\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const claims = pgTable(\"claims\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  latitude: real(\"latitude\").notNull(),\n  longitude: real(\"longitude\").notNull(),\n  radius: real(\"radius\").notNull().default(10),\n  area: real(\"area\").notNull(),\n  district: text(\"district\"),\n  city: text(\"city\"),\n  country: text(\"country\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const userPaths = pgTable(\"user_paths\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  username: text(\"username\").notNull(),\n  pathPoints: text(\"path_points\").notNull(), // JSON array of {lat, lng, timestamp, accuracy}\n  pathLength: real(\"path_length\").default(0), // Total length in meters\n  area: real(\"area\").default(0), // Area covered by path (width * length)\n  isActive: integer(\"is_active\").default(1), // 1 for active, 0 for completed\n  district: text(\"district\"),\n  city: text(\"city\"),\n  country: text(\"country\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const completedCircles = pgTable(\"completed_circles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  username: text(\"username\").notNull(),\n  centerLatitude: real(\"center_latitude\").notNull(),\n  centerLongitude: real(\"center_longitude\").notNull(),\n  radius: real(\"radius\").notNull(),\n  area: real(\"area\").notNull(),\n  pathPoints: text(\"path_points\").notNull(), // JSON string of location history that formed the circle\n  completionTime: real(\"completion_time\"), // Time taken to complete circle in seconds\n  district: text(\"district\"),\n  city: text(\"city\"),\n  country: text(\"country\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const mapViewPreferences = pgTable(\"map_view_preferences\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull().unique(),\n  locationHistory: text(\"location_history\").notNull().default(\"[]\"), // JSON array of {lat, lng, timestamp}\n  isCircleComplete: integer(\"is_circle_complete\").default(0), // 0 for false, 1 for true\n  circleCenter: text(\"circle_center\"), // JSON object {lat, lng} or null\n  mapZoom: real(\"map_zoom\").default(15),\n  mapCenter: text(\"map_center\"), // JSON object {lat, lng} for last map center\n  isTracking: integer(\"is_tracking\").default(0), // 0 for false, 1 for true\n  lastPosition: text(\"last_position\"), // JSON object of last GeolocationPosition\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertClaimSchema = createInsertSchema(claims).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserPathSchema = createInsertSchema(userPaths).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  district: z.string().nullable().optional(),\n  city: z.string().nullable().optional(),\n  country: z.string().nullable().optional(),\n});\n\nexport const insertCompletedCircleSchema = createInsertSchema(completedCircles).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertMapViewPreferencesSchema = createInsertSchema(mapViewPreferences).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertClaim = z.infer<typeof insertClaimSchema>;\nexport type Claim = typeof claims.$inferSelect;\nexport type InsertUserPath = z.infer<typeof insertUserPathSchema>;\nexport type UserPath = typeof userPaths.$inferSelect;\nexport type InsertCompletedCircle = z.infer<typeof insertCompletedCircleSchema>;\nexport type CompletedCircle = typeof completedCircles.$inferSelect;\nexport type InsertMapViewPreferences = z.infer<typeof insertMapViewPreferencesSchema>;\nexport type MapViewPreferences = typeof mapViewPreferences.$inferSelect;\n","size_bytes":4907},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useState, useEffect } from \"react\";\nimport Home from \"@/pages/home\";\nimport Login from \"@/pages/login\";\nimport NotFound from \"@/pages/not-found\";\nimport type { User } from \"@shared/schema\";\n\nfunction Router() {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    // Check for existing user session\n    const savedUser = localStorage.getItem('territoryWalkerUser');\n    if (savedUser) {\n      try {\n        setUser(JSON.parse(savedUser));\n      } catch (error) {\n        console.error('Failed to parse saved user:', error);\n        localStorage.removeItem('territoryWalkerUser');\n      }\n    }\n    setIsLoading(false);\n  }, []);\n\n  const handleLogin = (userData: User) => {\n    setUser(userData);\n    localStorage.setItem('territoryWalkerUser', JSON.stringify(userData));\n  };\n\n  const handleLogout = () => {\n    setUser(null);\n    localStorage.removeItem('territoryWalkerUser');\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 mx-auto mb-4 bg-blue-600 rounded-full flex items-center justify-center\">\n            <svg className=\"w-8 h-8 text-white animate-spin\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\n            </svg>\n          </div>\n          <p className=\"text-lg font-medium text-gray-900\">Loading Territory Walker...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      <Route path=\"/\">\n        {user ? (\n          <Home user={user} onLogout={handleLogout} />\n        ) : (\n          <Login onLogin={handleLogin} />\n        )}\n      </Route>\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2452},"client/src/index.css":{"content":"/* Import Leaflet CSS */\n@import 'leaflet/dist/leaflet.css';\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(60, 4.8%, 95.9%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(60, 4.8%, 95.9%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n\n  /* Game-specific colors */\n  --game-primary: hsl(213, 94%, 68%);\n  --game-secondary: hsl(142, 76%, 36%);\n  --game-accent: hsl(38, 92%, 50%);\n  --claimed-area: hsl(217, 91%, 60%);\n  --new-claim: hsl(142, 69%, 58%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', system-ui, sans-serif;\n  }\n}\n\n/* Leaflet map styles */\n.leaflet-container {\n  height: 100vh;\n  width: 100vw;\n}\n\n.leaflet-popup-content-wrapper {\n  @apply rounded-lg shadow-lg;\n}\n\n.leaflet-popup-content {\n  @apply text-sm;\n}\n\n/* Custom map control styles */\n.leaflet-control-layers {\n  @apply bg-white/90 backdrop-blur-sm rounded-lg shadow-lg border border-white/20;\n}\n\n.leaflet-control-zoom {\n  @apply bg-white/90 backdrop-blur-sm rounded-lg shadow-lg border border-white/20;\n}\n\n.leaflet-control-zoom a {\n  @apply text-gray-700 hover:bg-gray-100/50;\n}\n\n/* Game-specific utility classes */\n.game-primary {\n  background-color: var(--game-primary);\n}\n\n.game-secondary {\n  background-color: var(--game-secondary);\n}\n\n.game-accent {\n  background-color: var(--game-accent);\n}\n\n.claimed-area {\n  background-color: var(--claimed-area);\n}\n\n.new-claim {\n  background-color: var(--new-claim);\n}\n\n/* Animation for GPS pulse */\n@keyframes gps-pulse {\n  0%, 100% {\n    opacity: 1;\n    transform: scale(1);\n  }\n  50% {\n    opacity: 0.7;\n    transform: scale(1.1);\n  }\n}\n\n.gps-pulse {\n  animation: gps-pulse 2s ease-in-out infinite;\n}\n\n/* Custom scrollbar for leaderboard */\n.custom-scrollbar {\n  scrollbar-width: thin;\n  scrollbar-color: var(--game-primary) transparent;\n}\n\n.custom-scrollbar::-webkit-scrollbar {\n  width: 6px;\n}\n\n.custom-scrollbar::-webkit-scrollbar-track {\n  background: transparent;\n}\n\n.custom-scrollbar::-webkit-scrollbar-thumb {\n  background: var(--game-primary);\n  border-radius: 3px;\n}\n\n.custom-scrollbar::-webkit-scrollbar-thumb:hover {\n  background: var(--game-secondary);\n}\n","size_bytes":3566},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"shared/utils/geometry.ts":{"content":"// Geometry utility functions for path tracking and intersection detection\n\nexport interface LatLng {\n  lat: number;\n  lng: number;\n}\n\nexport interface PathPoint extends LatLng {\n  timestamp: number;\n  accuracy?: number;\n}\n\n/**\n * Calculate distance between two points using Haversine formula\n */\nexport function calculateDistance(point1: LatLng, point2: LatLng): number {\n  const R = 6371000; // Earth's radius in meters\n  const dLat = toRadians(point2.lat - point1.lat);\n  const dLng = toRadians(point2.lng - point1.lng);\n  const lat1 = toRadians(point1.lat);\n  const lat2 = toRadians(point2.lat);\n\n  const a = Math.sin(dLat/2) * Math.sin(dLat/2) +\n          Math.sin(dLng/2) * Math.sin(dLng/2) * Math.cos(lat1) * Math.cos(lat2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n\n  return R * c;\n}\n\n/**\n * Calculate total path length from array of points\n */\nexport function calculatePathLength(points: LatLng[]): number {\n  if (points.length < 2) return 0;\n  \n  let totalLength = 0;\n  for (let i = 1; i < points.length; i++) {\n    totalLength += calculateDistance(points[i-1], points[i]);\n  }\n  return totalLength;\n}\n\n/**\n * Calculate claimed area using the formula: Area = (distance * 2 * r) + (π * r²)\n * This includes both the path area (rectangle) and circular end caps\n */\nexport function calculateClaimedArea(pathLength: number, radius: number = 10): number {\n  // Area = (distance * 2 * r) + (π * r²)\n  // Where distance is path length, r is radius (10m)\n  const rectangularArea = pathLength * 2 * radius; // Path corridor area\n  const circularArea = Math.PI * radius * radius; // End caps area\n  return rectangularArea + circularArea;\n}\n\n/**\n * Legacy function for backward compatibility - now uses the new formula\n */\nexport function calculatePathArea(pathLength: number, width: number = 10): number {\n  // Convert width to radius for the new formula\n  const radius = width / 2;\n  return calculateClaimedArea(pathLength, radius);\n}\n\n/**\n * Check if two line segments intersect\n */\nexport function lineSegmentsIntersect(\n  p1: LatLng, p2: LatLng, \n  p3: LatLng, p4: LatLng\n): boolean {\n  const d1 = direction(p3, p4, p1);\n  const d2 = direction(p3, p4, p2);\n  const d3 = direction(p1, p2, p3);\n  const d4 = direction(p1, p2, p4);\n  \n  if (((d1 > 0 && d2 < 0) || (d1 < 0 && d2 > 0)) &&\n      ((d3 > 0 && d4 < 0) || (d3 < 0 && d4 > 0))) {\n    return true;\n  }\n  \n  return false;\n}\n\n/**\n * Find self-intersections in a path and create circles\n */\nexport function findPathIntersections(points: PathPoint[]): Array<{\n  intersection: LatLng;\n  circlePoints: PathPoint[];\n  area: number;\n}> {\n  const intersections: Array<{\n    intersection: LatLng;\n    circlePoints: PathPoint[];\n    area: number;\n  }> = [];\n  \n  if (points.length < 4) return intersections;\n  \n  // Check each segment against all other non-adjacent segments\n  for (let i = 0; i < points.length - 1; i++) {\n    for (let j = i + 2; j < points.length - 1; j++) {\n      // Skip adjacent segments\n      if (j === i + 1) continue;\n      \n      const p1 = points[i];\n      const p2 = points[i + 1];\n      const p3 = points[j];\n      const p4 = points[j + 1];\n      \n      if (lineSegmentsIntersect(p1, p2, p3, p4)) {\n        const intersection = getLineIntersection(p1, p2, p3, p4);\n        if (intersection) {\n          // Extract the circular path between intersections\n          const circlePoints = points.slice(i + 1, j + 1);\n          circlePoints.unshift(intersection as PathPoint);\n          circlePoints.push(intersection as PathPoint);\n          \n          const area = calculatePolygonArea(circlePoints);\n          \n          intersections.push({\n            intersection,\n            circlePoints,\n            area\n          });\n        }\n      }\n    }\n  }\n  \n  return intersections;\n}\n\n/**\n * Calculate the area of a polygon using the shoelace formula\n */\nexport function calculatePolygonArea(points: LatLng[]): number {\n  if (points.length < 3) return 0;\n  \n  // Convert to meters using a simple approximation\n  const metersPerDegree = 111320; // approximate meters per degree at equator\n  \n  let area = 0;\n  for (let i = 0; i < points.length; i++) {\n    const j = (i + 1) % points.length;\n    const xi = points[i].lng * metersPerDegree * Math.cos(toRadians(points[i].lat));\n    const yi = points[i].lat * metersPerDegree;\n    const xj = points[j].lng * metersPerDegree * Math.cos(toRadians(points[j].lat));\n    const yj = points[j].lat * metersPerDegree;\n    \n    area += xi * yj;\n    area -= xj * yi;\n  }\n  \n  return Math.abs(area) / 2;\n}\n\n/**\n * Get intersection point of two line segments\n */\nfunction getLineIntersection(p1: LatLng, p2: LatLng, p3: LatLng, p4: LatLng): LatLng | null {\n  const x1 = p1.lng, y1 = p1.lat;\n  const x2 = p2.lng, y2 = p2.lat;\n  const x3 = p3.lng, y3 = p3.lat;\n  const x4 = p4.lng, y4 = p4.lat;\n  \n  const denom = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n  if (Math.abs(denom) < 1e-10) return null; // Lines are parallel\n  \n  const t = ((x1 - x3) * (y3 - y4) - (y1 - y3) * (x3 - x4)) / denom;\n  const u = -((x1 - x2) * (y1 - y3) - (y1 - y2) * (x1 - x3)) / denom;\n  \n  if (t >= 0 && t <= 1 && u >= 0 && u <= 1) {\n    return {\n      lng: x1 + t * (x2 - x1),\n      lat: y1 + t * (y2 - y1)\n    };\n  }\n  \n  return null;\n}\n\n/**\n * Calculate direction of point c relative to line ab\n */\nfunction direction(a: LatLng, b: LatLng, c: LatLng): number {\n  return (c.lng - a.lng) * (b.lat - a.lat) - (b.lng - a.lng) * (c.lat - a.lat);\n}\n\n/**\n * Convert degrees to radians\n */\nfunction toRadians(degrees: number): number {\n  return degrees * (Math.PI / 180);\n}\n\n/**\n * Convert radians to degrees\n */\nfunction toDegrees(radians: number): number {\n  return radians * (180 / Math.PI);\n}","size_bytes":5700},"client/src/components/AreaStats.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { getCompletedCirclesByUser } from \"@/services/api\";\nimport type { User } from \"@shared/schema\";\nimport { MapPin, Clock, Trophy, Target } from \"lucide-react\";\nimport { useEffect } from \"react\";\n\ninterface AreaStatsProps {\n  user: User;\n  onClose: () => void;\n}\n\nexport default function AreaStats({ user, onClose }: AreaStatsProps) {\n  const { data: completedCirclesData } = useQuery({\n    queryKey: ['/api/completed-circles/user', user.id],\n  });\n\n  // Handle escape key to close modal\n  useEffect(() => {\n    const handleEscape = (event: KeyboardEvent) => {\n      if (event.key === 'Escape') {\n        onClose();\n      }\n    };\n\n    document.addEventListener('keydown', handleEscape);\n    return () => {\n      document.removeEventListener('keydown', handleEscape);\n    };\n  }, [onClose]);\n\n  const completedCircles = completedCirclesData?.completedCircles || [];\n  const totalCompletedCircles = completedCircles.length;\n  const totalAreaClaimed = completedCircles.reduce((sum, circle) => sum + (circle.area || 0), 0);\n  const averageCompletionTime = completedCircles.length > 0 \n    ? completedCircles.reduce((sum, circle) => sum + (circle.completionTime || 0), 0) / completedCircles.length\n    : 0;\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\" onClick={onClose}>\n      <div className=\"bg-white rounded-2xl shadow-xl max-w-md w-full mx-4 max-h-[80vh] overflow-y-auto\" onClick={(e) => e.stopPropagation()}>\n        <div className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h2 className=\"text-2xl font-bold text-gray-900\">Your Statistics</h2>\n            <div className=\"flex items-center space-x-2\">\n              <button\n                onClick={(e) => {\n                  e.preventDefault();\n                  e.stopPropagation();\n                  console.log('Close button clicked');\n                  onClose();\n                }}\n                className=\"text-gray-400 hover:text-gray-600 transition-colors p-1 rounded-full hover:bg-gray-100 cursor-pointer z-10 relative\"\n              >\n                <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M6 18L18 6M6 6l12 12\" />\n                </svg>\n              </button>\n              <button\n                onClick={onClose}\n                className=\"text-sm text-blue-600 hover:text-blue-800 underline\"\n              >\n                Close\n              </button>\n            </div>\n          </div>\n\n          <div className=\"space-y-6\">\n            {/* Total Area */}\n            <div className=\"bg-gradient-to-r from-blue-500 to-purple-600 rounded-xl p-4 text-white\">\n              <div className=\"flex items-center space-x-3\">\n                <MapPin className=\"w-8 h-8\" />\n                <div>\n                  <p className=\"text-sm opacity-90\">Total Area Claimed</p>\n                  <p className=\"text-2xl font-bold\">{Math.round(totalAreaClaimed).toLocaleString()} m²</p>\n                </div>\n              </div>\n            </div>\n\n            {/* Claims */}\n            <div className=\"bg-gray-50 rounded-xl p-4\">\n              <div className=\"flex items-center space-x-3\">\n                <Trophy className=\"w-6 h-6 text-yellow-600\" />\n                <div>\n                  <p className=\"text-sm text-gray-600\">Total Claims</p>\n                  <p className=\"text-xl font-bold text-gray-900\">{user.totalClaims || 0}</p>\n                </div>\n              </div>\n            </div>\n\n            {/* Completed Circles */}\n            <div className=\"bg-gray-50 rounded-xl p-4\">\n              <div className=\"flex items-center space-x-3\">\n                <Target className=\"w-6 h-6 text-green-600\" />\n                <div>\n                  <p className=\"text-sm text-gray-600\">Completed Circles</p>\n                  <p className=\"text-xl font-bold text-gray-900\">{totalCompletedCircles}</p>\n                </div>\n              </div>\n            </div>\n\n            {/* Average Completion Time */}\n            {averageCompletionTime > 0 && (\n              <div className=\"bg-gray-50 rounded-xl p-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <Clock className=\"w-6 h-6 text-blue-600\" />\n                  <div>\n                    <p className=\"text-sm text-gray-600\">Avg. Completion Time</p>\n                    <p className=\"text-xl font-bold text-gray-900\">{Math.round(averageCompletionTime)}s</p>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Recent Completed Circles */}\n            {completedCircles.length > 0 && (\n              <div className=\"bg-gray-50 rounded-xl p-4\">\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-3\">Recent Circles</h3>\n                <div className=\"space-y-2\">\n                  {completedCircles.slice(0, 3).map((circle) => (\n                    <div key={circle.id} className=\"flex items-center justify-between text-sm\">\n                      <span className=\"text-gray-600\">\n                        {new Date(circle.createdAt!).toLocaleDateString()}\n                      </span>\n                      <span className=\"font-medium text-gray-900\">\n                        {Math.round(circle.area)} m²\n                      </span>\n                      {circle.completionTime && (\n                        <span className=\"text-blue-600\">\n                          {Math.round(circle.completionTime)}s\n                        </span>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5841},"client/src/components/Leaderboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Trophy, Medal, Award, X } from \"lucide-react\";\n\ninterface LeaderboardProps {\n  user: User;\n  onClose: () => void;\n}\n\nexport default function Leaderboard({ user, onClose }: LeaderboardProps) {\n  const [scope, setScope] = useState<'district' | 'city' | 'country'>('district');\n  \n  const location = scope === 'district' ? user.district || 'unknown' : \n                  scope === 'city' ? user.city || 'unknown' : \n                  user.country || 'unknown';\n\n  const { data: leaderboardData, isLoading } = useQuery<{ leaderboard: User[] }>({\n    queryKey: ['/api/leaderboard', scope, location],\n    enabled: !!location,\n  });\n\n  const getRankIcon = (rank: number) => {\n    switch (rank) {\n      case 1:\n        return <Trophy className=\"w-5 h-5 text-yellow-500\" />;\n      case 2:\n        return <Medal className=\"w-5 h-5 text-gray-400\" />;\n      case 3:\n        return <Award className=\"w-5 h-5 text-amber-600\" />;\n      default:\n        return (\n          <div className=\"w-6 h-6 bg-gray-300 text-gray-700 rounded-full flex items-center justify-center text-sm font-medium\">\n            {rank}\n          </div>\n        );\n    }\n  };\n\n  const getRankBg = (rank: number, isCurrentUser: boolean) => {\n    if (isCurrentUser) {\n      return \"bg-blue-600/10 border-2 border-blue-600/20\";\n    }\n    \n    switch (rank) {\n      case 1:\n        return \"bg-gradient-to-r from-yellow-500/10 to-yellow-400/5 border border-yellow-500/20\";\n      case 2:\n        return \"bg-gradient-to-r from-gray-100 to-gray-50 border border-gray-200\";\n      case 3:\n        return \"bg-gradient-to-r from-amber-50 to-amber-25 border border-amber-200\";\n      default:\n        return \"hover:bg-gray-50\";\n    }\n  };\n\n  return (\n    <Dialog open={true} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-md max-h-[80vh] p-0 bg-white rounded-2xl\">\n        <DialogHeader className=\"flex flex-row items-center justify-between p-6 border-b border-gray-100\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-8 h-8 bg-yellow-500 rounded-lg flex items-center justify-center\">\n              <Trophy className=\"w-4 h-4 text-white\" />\n            </div>\n            <DialogTitle className=\"text-xl font-bold text-gray-900\">\n              Leaderboard\n            </DialogTitle>\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={onClose}\n            className=\"p-2 hover:bg-gray-100 rounded-lg\"\n          >\n            <X className=\"w-5 h-5 text-gray-500\" />\n          </Button>\n        </DialogHeader>\n\n        <div className=\"px-6 pt-4\">\n          <Tabs value={scope} onValueChange={(value) => setScope(value as any)}>\n            <TabsList className=\"grid w-full grid-cols-3 bg-gray-100 rounded-lg p-1\">\n              <TabsTrigger \n                value=\"district\" \n                className=\"py-2 px-3 text-sm font-medium data-[state=active]:bg-blue-600 data-[state=active]:text-white\"\n              >\n                District\n              </TabsTrigger>\n              <TabsTrigger \n                value=\"city\"\n                className=\"py-2 px-3 text-sm font-medium data-[state=active]:bg-blue-600 data-[state=active]:text-white\"\n              >\n                City\n              </TabsTrigger>\n              <TabsTrigger \n                value=\"country\"\n                className=\"py-2 px-3 text-sm font-medium data-[state=active]:bg-blue-600 data-[state=active]:text-white\"\n              >\n                Country\n              </TabsTrigger>\n            </TabsList>\n          </Tabs>\n        </div>\n\n        <div className=\"p-6 pt-4 overflow-y-auto custom-scrollbar max-h-96\">\n          {isLoading ? (\n            <div className=\"space-y-3\">\n              {[1, 2, 3, 4, 5].map((i) => (\n                <div key={i} className=\"flex items-center space-x-3 p-3 bg-gray-100 rounded-lg animate-pulse\">\n                  <div className=\"w-8 h-8 bg-gray-200 rounded-full\"></div>\n                  <div className=\"flex-1\">\n                    <div className=\"w-24 h-4 bg-gray-200 rounded mb-1\"></div>\n                    <div className=\"w-16 h-3 bg-gray-200 rounded\"></div>\n                  </div>\n                  <div className=\"w-16 h-4 bg-gray-200 rounded\"></div>\n                </div>\n              ))}\n            </div>\n          ) : !leaderboardData?.leaderboard?.length ? (\n            <div className=\"text-center py-8\">\n              <Trophy className=\"w-12 h-12 text-gray-300 mx-auto mb-4\" />\n              <p className=\"text-gray-500\">No players found in this area</p>\n              <p className=\"text-sm text-gray-400 mt-1\">Be the first to claim territory!</p>\n            </div>\n          ) : (\n            <div className=\"space-y-2\">\n              {leaderboardData.leaderboard.map((player: User, index: number) => {\n                const rank = index + 1;\n                const isCurrentUser = player.id === user.id;\n                \n                return (\n                  <div\n                    key={player.id}\n                    className={`flex items-center space-x-3 p-3 rounded-lg transition-colors ${getRankBg(rank, isCurrentUser)}`}\n                  >\n                    <div className=\"flex-shrink-0\">\n                      {getRankIcon(rank)}\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <p className={`font-semibold ${isCurrentUser ? 'text-blue-600' : 'text-gray-900'} truncate`}>\n                        {player.username}\n                        {isCurrentUser && <span className=\"text-sm ml-1\">(You)</span>}\n                      </p>\n                      <p className={`text-sm ${isCurrentUser ? 'text-blue-500' : 'text-gray-600'}`}>\n                        {player.district || player.city || 'Unknown Area'}\n                      </p>\n                    </div>\n                    <div className=\"text-right flex-shrink-0\">\n                      <p className={`font-bold ${isCurrentUser ? 'text-blue-600' : rank <= 3 ? 'text-yellow-600' : 'text-gray-700'}`}>\n                        {Math.round(player.totalArea || 0).toLocaleString()} m²\n                      </p>\n                      <p className={`text-xs ${isCurrentUser ? 'text-blue-500' : 'text-gray-500'}`}>\n                        {player.totalClaims || 0} claims\n                      </p>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":6851},"client/src/components/MapView.tsx":{"content":"import { useEffect, useRef, useState } from \"react\";\nimport { useQuery, useQueryClient, useMutation } from \"@tanstack/react-query\";\nimport type { User, Claim, CompletedCircle, UserPath } from \"@shared/schema\";\nimport { checkOverlap, calculateCircleArea } from \"@/utils/ClaimManager\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { getCompletedCircles, createCompletedCircle } from \"@/services/api\";\n\n// Import Leaflet dynamically to avoid SSR issues\nlet L: any = null;\nlet isLeafletLoaded = false;\nlet leafletPromise: Promise<any> | null = null;\n\nconst loadLeaflet = async () => {\n  if (typeof window !== 'undefined' && !isLeafletLoaded) {\n    if (!leafletPromise) {\n      leafletPromise = import('leaflet').then(async (leaflet) => {\n        // Import Leaflet CSS\n        await import('leaflet/dist/leaflet.css');\n        L = leaflet.default;\n        isLeafletLoaded = true;\n        return L;\n      }).catch((error) => {\n        console.error('Failed to load Leaflet:', error);\n        throw error;\n      });\n    }\n    return leafletPromise;\n  }\n  return Promise.resolve(L);\n};\n\ninterface MapViewProps {\n  user: User;\n  position: GeolocationPosition | null;\n  isTracking: boolean;\n  locationHistory: Array<{lat: number, lng: number, timestamp: number}>;\n  isCircleComplete: boolean;\n  circleCenter: {lat: number, lng: number} | null;\n  onClaimSuccess: (area: number) => void;\n  onClaimError: (message: string) => void;\n  onCircleComplete: (center: {lat: number, lng: number}) => void;\n}\n\nexport default function MapView({ \n  user, \n  position, \n  isTracking, \n  locationHistory,\n  isCircleComplete,\n  circleCenter,\n  onClaimSuccess, \n  onClaimError,\n  onCircleComplete\n}: MapViewProps) {\n  const mapRef = useRef<HTMLDivElement>(null);\n  const mapInstanceRef = useRef<any>(null);\n  const currentCircleRef = useRef<any>(null);\n  const currentPositionMarkerRef = useRef<any>(null); // <-- Add this line\n  const claimedLayersRef = useRef<any[]>([]);\n  const locationPathRef = useRef<any>(null);\n  const completedCircleLayersRef = useRef<any[]>([]);\n  const [isMapReady, setIsMapReady] = useState(false);\n  const [mapError, setMapError] = useState<string | null>(null);\n  const [loadingProgress, setLoadingProgress] = useState(0);\n\n  const queryClient = useQueryClient();\n\n  // Preload Leaflet as soon as component mounts\n  useEffect(() => {\n    loadLeaflet().catch(console.error);\n  }, []);\n\n  // Fetch all claims for visualization\n  const { data: claimsData } = useQuery<{ claims: Claim[] }>({\n    queryKey: ['/api/claims'],\n    enabled: isMapReady,\n  });\n\n  // Fetch user's claims\n  const { data: userClaimsData } = useQuery<{ claims: Claim[] }>({\n    queryKey: ['/api/claims/user', user.id],\n    enabled: isMapReady,\n  });\n\n  // Fetch completed circles\n  const { data: completedCirclesData } = useQuery<{ completedCircles: CompletedCircle[] }>({\n    queryKey: ['/api/completed-circles'],\n    enabled: isMapReady,\n  });\n\n  // Fetch user's all paths (including previous ones)\n  const { data: userPathsData } = useQuery<{ userPaths: UserPath[] }>({\n    queryKey: ['/api/user-paths/user', user.id],\n    enabled: isMapReady,\n  });\n\n  // Create claim mutation\n  const createClaimMutation = useMutation({\n    mutationFn: async (claimData: any) => {\n      const response = await apiRequest('POST', '/api/claims', claimData);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      onClaimSuccess(data.claim.area);\n      queryClient.invalidateQueries({ queryKey: ['/api/claims'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/claims/user', user.id] });\n    },\n    onError: (error: any) => {\n      onClaimError(error.message || 'Failed to claim area');\n    },\n  });\n\n  // Create completed circle mutation\n  const createCompletedCircleMutation = useMutation({\n    mutationFn: async (completedCircleData: any) => {\n      const response = await createCompletedCircle(completedCircleData);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/completed-circles'] });\n    },\n    onError: (error: any) => {\n      console.error('Failed to save completed circle:', error);\n    },\n  });\n\n  // Initialize map\n  useEffect(() => {\n    const initializeMap = async () => {\n      try {\n        console.log('Starting map initialization...');\n        setLoadingProgress(10);\n        await new Promise(resolve => setTimeout(resolve, 100)); // Small delay for UI\n        \n        setLoadingProgress(30);\n        console.log('Loading Leaflet...');\n        await loadLeaflet();\n        \n        setLoadingProgress(60);\n        await new Promise(resolve => setTimeout(resolve, 200)); // Small delay for UI\n        \n        if (!mapRef.current || !L || mapInstanceRef.current) {\n          console.log('Map ref or Leaflet not ready:', { \n            mapRef: !!mapRef.current, \n            L: !!L, \n            mapInstance: !!mapInstanceRef.current \n          });\n          return;\n        }\n\n        console.log('Creating map instance...');\n        setLoadingProgress(80);\n        const map = L.map(mapRef.current, {\n          center: [40.7128, -74.0060], // Default to NYC\n          zoom: 16,\n          zoomControl: true,\n          attributionControl: true,\n        });\n\n        console.log('Adding tile layer...');\n        // Add CartoDB tiles (usually faster than OpenStreetMap)\n        const tileLayer = L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {\n          attribution: '© CartoDB',\n          maxZoom: 19,\n          subdomains: 'abcd',\n        }).addTo(map);\n\n        // Add fallback tile provider if CartoDB fails\n        tileLayer.on('tileerror', () => {\n          console.log('CartoDB tiles failed, trying OpenStreetMap...');\n          // Try OpenStreetMap as fallback\n          L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n            attribution: '© OpenStreetMap contributors',\n            maxZoom: 19,\n          }).addTo(map);\n        });\n\n        setLoadingProgress(90);\n        await new Promise(resolve => setTimeout(resolve, 100)); // Small delay for UI\n        \n        mapInstanceRef.current = map;\n        setIsMapReady(true);\n        setMapError(null);\n        setLoadingProgress(100);\n        console.log('Map initialization complete!');\n        \n        // Let tiles load in background\n        setTimeout(() => {\n          console.log('Map tiles should be loaded by now');\n        }, 2000);\n      } catch (error) {\n        console.error('Failed to initialize map:', error);\n        setMapError('Failed to load map. Please check your internet connection and refresh the page.');\n      }\n    };\n\n    // Add timeout to prevent infinite loading\n    const timeoutId = setTimeout(() => {\n      if (!isMapReady && !mapError) {\n        console.log('Map loading timeout reached');\n        setMapError('Map is taking too long to load. Please check your internet connection and refresh the page.');\n      }\n    }, 30000); // 30 second timeout (increased from 10 seconds)\n\n    initializeMap();\n\n    return () => {\n      clearTimeout(timeoutId);\n      if (mapInstanceRef.current) {\n        mapInstanceRef.current.remove();\n        mapInstanceRef.current = null;\n      }\n    };\n  }, []);\n\n  // Update user position and current circle\n  useEffect(() => {\n    console.log('Position update:', { position, isTracking, mapReady: !!mapInstanceRef.current });\n    \n    if (!mapInstanceRef.current || !L || !position || !isTracking) {\n      if (currentCircleRef.current) {\n        mapInstanceRef.current.removeLayer(currentCircleRef.current);\n        currentCircleRef.current = null;\n      }\n      if (currentPositionMarkerRef.current) { // <-- Remove marker if exists\n        mapInstanceRef.current.removeLayer(currentPositionMarkerRef.current);\n        currentPositionMarkerRef.current = null;\n      }\n      return;\n    }\n\n    const map = mapInstanceRef.current;\n    const { latitude, longitude } = position.coords;\n    \n    console.log('Setting position:', { latitude, longitude });\n\n    // Update map center\n    map.setView([latitude, longitude], map.getZoom());\n\n    // Remove previous current circle\n    if (currentCircleRef.current) {\n      map.removeLayer(currentCircleRef.current);\n    }\n    // Remove previous marker\n    if (currentPositionMarkerRef.current) {\n      map.removeLayer(currentPositionMarkerRef.current);\n    }\n\n    // Add current position circle (10m radius)\n    const currentCircle = L.circle([latitude, longitude], {\n      radius: 10,\n      color: '#22C55E',\n      fillColor: '#22C55E',\n      fillOpacity: 0.3,\n      weight: 2,\n    }).addTo(map);\n\n    // Add a more visible marker for exact position\n    const positionMarker = L.marker([latitude, longitude], {\n      icon: L.divIcon({\n        className: 'custom-marker',\n        html: `<div style=\"background-color: #EF4444; width: 16px; height: 16px; border-radius: 50%; border: 3px solid white; box-shadow: 0 2px 8px rgba(0,0,0,0.4); position: relative;\">\n          <div style=\"position: absolute; top: -8px; left: -8px; width: 32px; height: 32px; border: 2px solid #EF4444; border-radius: 50%; opacity: 0.3;\"></div>\n        </div>`,\n        iconSize: [16, 16],\n        iconAnchor: [8, 8]\n      }),\n      zIndexOffset: 1000 // <-- Make sure marker is on top\n    }).addTo(map);\n\n    // Add accuracy circle (if accuracy is available)\n    if (position.coords.accuracy) {\n      const accuracyCircle = L.circle([latitude, longitude], {\n        radius: position.coords.accuracy,\n        color: '#EF4444',\n        fillColor: '#EF4444',\n        fillOpacity: 0.1,\n        weight: 1,\n        dashArray: '5, 5'\n      }).addTo(map);\n    }\n\n    currentCircle.bindPopup(`\n      <div>\n        <strong>Current Position</strong><br>\n        Lat: ${latitude.toFixed(6)}<br>\n        Lng: ${longitude.toFixed(6)}<br>\n        Radius: 10m<br>\n        <button onclick=\"window.attemptClaim()\" style=\"background: #22C55E; color: white; border: none; padding: 8px 16px; border-radius: 8px; cursor: pointer; margin-top: 8px;\">\n          Claim This Area\n        </button>\n      </div>\n    `);\n\n    currentCircleRef.current = currentCircle;\n    currentPositionMarkerRef.current = positionMarker; // <-- Track marker\n\n    // Expose claim function globally for popup button\n    (window as any).attemptClaim = handleClaimAttempt;\n  }, [position, isTracking]);\n\n  // Render location history path\n  useEffect(() => {\n    if (!mapInstanceRef.current || !L || locationHistory.length < 2) {\n      if (locationPathRef.current) {\n        mapInstanceRef.current.removeLayer(locationPathRef.current);\n        locationPathRef.current = null;\n      }\n      return;\n    }\n\n    const map = mapInstanceRef.current;\n\n    // Remove previous path\n    if (locationPathRef.current) {\n      map.removeLayer(locationPathRef.current);\n    }\n\n    // Create path from location history\n    const pathCoords = locationHistory.map(point => [point.lat, point.lng]);\n    const path = L.polyline(pathCoords, {\n      color: '#EF4444',\n      weight: 3,\n      opacity: 0.8,\n    }).addTo(map);\n\n    locationPathRef.current = path;\n\n    // Check for circle completion\n    if (isCircleComplete && circleCenter) {\n      onCircleComplete(circleCenter);\n    }\n  }, [locationHistory, isCircleComplete, circleCenter, onCircleComplete]);\n\n  // Render claimed areas\n  useEffect(() => {\n    if (!mapInstanceRef.current || !L || !claimsData?.claims) return;\n\n    const map = mapInstanceRef.current;\n\n    // Clear previous claimed layers\n    claimedLayersRef.current.forEach(layer => {\n      map.removeLayer(layer);\n    });\n    claimedLayersRef.current = [];\n\n    // Add claimed circles\n    claimsData.claims.forEach((claim: Claim) => {\n      const isUserClaim = claim.userId === user.id;\n      const circle = L.circle([claim.latitude, claim.longitude], {\n        radius: claim.radius,\n        color: isUserClaim ? '#3B82F6' : '#94A3B8',\n        fillColor: isUserClaim ? '#3B82F6' : '#94A3B8',\n        fillOpacity: isUserClaim ? 0.4 : 0.2,\n        weight: isUserClaim ? 2 : 1,\n      }).addTo(map);\n\n      circle.bindPopup(`\n        <div>\n          <strong>${isUserClaim ? 'Your Claim' : 'Claimed Area'}</strong><br>\n          Area: ${Math.round(claim.area)} m²<br>\n          Claimed: ${new Date(claim.createdAt!).toLocaleString()}\n          ${claim.district ? `<br>District: ${claim.district}` : ''}\n        </div>\n      `);\n\n      claimedLayersRef.current.push(circle);\n    });\n  }, [claimsData, user.id]);\n\n  // Render completed circles\n  useEffect(() => {\n    if (!mapInstanceRef.current || !L || !completedCirclesData?.completedCircles) return;\n\n    const map = mapInstanceRef.current;\n\n    // Clear previous completed circle layers\n    completedCircleLayersRef.current.forEach(layer => {\n      if (map.hasLayer(layer)) {\n        map.removeLayer(layer);\n      }\n    });\n    completedCircleLayersRef.current = [];\n\n    // Add completed circles\n    completedCirclesData.completedCircles.forEach((circle: CompletedCircle) => {\n      const isUserCircle = circle.userId === user.id;\n      const circleLayer = L.circle([circle.centerLatitude, circle.centerLongitude], {\n        radius: circle.radius,\n        color: isUserCircle ? '#10B981' : '#F59E0B',\n        fillColor: isUserCircle ? '#10B981' : '#F59E0B',\n        fillOpacity: isUserCircle ? 0.5 : 0.3,\n        weight: isUserCircle ? 3 : 2,\n        className: 'completed-circle-layer',\n      }).addTo(map);\n\n      circleLayer.bindPopup(`\n        <div>\n          <strong>${isUserCircle ? 'Your Completed Circle' : 'Completed Circle'}</strong><br>\n          User: ${circle.username}<br>\n          Area: ${Math.round(circle.area)} m²<br>\n          Completed: ${new Date(circle.createdAt!).toLocaleString()}\n          ${circle.completionTime ? `<br>Time: ${Math.round(circle.completionTime)}s` : ''}\n          ${circle.district ? `<br>District: ${circle.district}` : ''}\n        </div>\n      `);\n      completedCircleLayersRef.current.push(circleLayer);\n    });\n  }, [completedCirclesData, user.id]);\n\n  // Render all user paths (including previous ones)\n  const allUserPathsRef = useRef<any[]>([]);\n  useEffect(() => {\n    if (!mapInstanceRef.current || !L || !userPathsData?.userPaths) return;\n\n    const map = mapInstanceRef.current;\n\n    // Clear previous user path layers\n    allUserPathsRef.current.forEach(layer => {\n      if (map.hasLayer(layer)) {\n        map.removeLayer(layer);\n      }\n    });\n    allUserPathsRef.current = [];\n\n    // Render all user paths\n    userPathsData.userPaths.forEach((userPath: UserPath) => {\n      try {\n        const pathPoints = JSON.parse(userPath.pathPoints) as Array<{lat: number, lng: number, timestamp: number}>;\n        \n        if (pathPoints && pathPoints.length > 1) {\n          const latLngs = pathPoints.map(point => [point.lat, point.lng]);\n          \n          // Different styles for active vs completed paths\n          const isActive = userPath.isActive === 1;\n          const pathStyle = {\n            color: isActive ? '#3B82F6' : '#6B7280', // Blue for active, gray for completed\n            weight: isActive ? 4 : 3,\n            opacity: isActive ? 0.8 : 0.6,\n            className: `user-path-layer ${isActive ? 'active-path' : 'completed-path'}`,\n          };\n\n          const polyline = L.polyline(latLngs, pathStyle).addTo(map);\n\n          // Add popup with path information\n          const pathLength = userPath.pathLength || 0;\n          const pathArea = userPath.area || 0;\n          const createdDate = new Date(userPath.createdAt!).toLocaleString();\n          \n          polyline.bindPopup(`\n            <div>\n              <strong>${isActive ? 'Active Path' : 'Completed Path'}</strong><br>\n              Length: ${Math.round(pathLength)} m<br>\n              Area: ${Math.round(pathArea)} m²<br>\n              Points: ${pathPoints.length}<br>\n              Created: ${createdDate}\n              ${userPath.district ? `<br>District: ${userPath.district}` : ''}\n            </div>\n          `);\n\n          allUserPathsRef.current.push(polyline);\n        }\n      } catch (error) {\n        console.error('Error parsing path points:', error);\n      }\n    });\n  }, [userPathsData, user.id]);\n\n  // Handle circle completion\n  useEffect(() => {\n    if (isCircleComplete && circleCenter && !createCompletedCircleMutation.isPending) {\n      const { latitude, longitude } = position!.coords;\n      const radius = 10;\n      const area = calculateCircleArea(radius);\n      \n      // Calculate completion time (time from first to last point)\n      const completionTime = locationHistory.length > 1 \n        ? (locationHistory[locationHistory.length - 1].timestamp - locationHistory[0].timestamp) / 1000\n        : 0;\n\n      // Get location details\n      const district = `District_${Math.floor(latitude * 100) % 100}`;\n      const city = `City_${Math.floor(longitude * 100) % 100}`;\n      const country = 'Unknown';\n\n      createCompletedCircleMutation.mutate({\n        userId: user.id,\n        username: user.username,\n        latitude: circleCenter.lat,\n        longitude: circleCenter.lng,\n        radius,\n        area,\n        pathPoints: JSON.stringify(locationHistory),\n        completionTime,\n        district,\n        city,\n        country,\n      });\n    }\n  }, [isCircleComplete, circleCenter, locationHistory, user, createCompletedCircleMutation]);\n\n  const handleClaimAttempt = async () => {\n    if (!position || !isTracking) {\n      onClaimError('GPS tracking required to claim areas');\n      return;\n    }\n\n    const { latitude, longitude } = position.coords;\n    const radius = 10;\n    const area = calculateCircleArea(radius);\n\n    // Check for overlaps with existing claims\n    if (claimsData?.claims) {\n      const hasOverlap = claimsData.claims.some((claim: Claim) => \n        checkOverlap(\n          { lat: latitude, lng: longitude, radius },\n          { lat: claim.latitude, lng: claim.longitude, radius: claim.radius }\n        )\n      );\n\n      if (hasOverlap) {\n        onClaimError('This area overlaps with an existing claim');\n        return;\n      }\n    }\n\n    // Attempt to get location details (simplified - in a real app you'd use reverse geocoding)\n    const district = `District_${Math.floor(latitude * 100) % 100}`;\n    const city = `City_${Math.floor(longitude * 100) % 100}`;\n    const country = 'Unknown';\n\n    createClaimMutation.mutate({\n      userId: user.id,\n      latitude,\n      longitude,\n      radius,\n      area,\n      district,\n      city,\n      country,\n    });\n  };\n\n  if (!L || !isMapReady) {\n    return (\n      <div className=\"absolute inset-0\">\n        {/* Map container - always render this */}\n        <div \n          ref={mapRef} \n          className=\"absolute inset-0 z-0\"\n          style={{ \n            height: '100vh', \n            width: '100vw',\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            backgroundColor: '#f0f0f0' // Light gray background to show the container\n          }}\n        />\n        \n        {/* Loading overlay */}\n        <div className=\"absolute inset-0 flex items-center justify-center bg-gradient-to-br from-blue-100 to-green-100 z-10\">\n          <div className=\"text-center text-gray-600\">\n            <div className=\"w-16 h-16 mx-auto mb-4 bg-blue-600 rounded-full flex items-center justify-center\">\n              <svg className=\"w-8 h-8 text-white animate-spin\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\n              </svg>\n            </div>\n            <p className=\"text-lg font-medium\">Loading Map...</p>\n            <p className=\"text-sm text-gray-500\">Initializing Leaflet</p>\n            <p className=\"text-xs text-gray-400 mt-2\">Progress: {loadingProgress}%</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (mapError) {\n    return (\n      <div className=\"absolute inset-0 flex items-center justify-center bg-gradient-to-br from-red-100 to-pink-100\">\n        <div className=\"text-center text-gray-600\">\n          <div className=\"w-16 h-16 mx-auto mb-4 bg-red-600 rounded-full flex items-center justify-center\">\n            <svg className=\"w-8 h-8 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\" />\n            </svg>\n          </div>\n          <p className=\"text-lg font-medium\">Map Error</p>\n          <p className=\"text-sm text-gray-500\">{mapError}</p>\n          <button \n            onClick={() => window.location.reload()} \n            className=\"mt-4 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\"\n          >\n            Refresh Page\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"absolute inset-0\">\n      {/* Map container - always render this */}\n      <div \n        ref={mapRef} \n        className=\"absolute inset-0 z-0\"\n        style={{ \n          height: '100vh', \n          width: '100vw',\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0\n        }}\n      />\n      \n      {/* Loading overlay - only show when loading */}\n      {loadingProgress < 100 && (\n        <div className=\"absolute inset-0 flex items-center justify-center bg-white bg-opacity-75 z-10\">\n          <div className=\"text-center\">\n            <div className=\"w-16 h-16 mx-auto mb-4 bg-blue-600 rounded-full flex items-center justify-center\">\n              <svg className=\"w-8 h-8 text-white animate-spin\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\n              </svg>\n            </div>\n            <p className=\"text-lg font-medium\">Loading Map...</p>\n            <p className=\"text-sm text-gray-500\">Initializing Leaflet</p>\n            <div className=\"mt-4 w-full bg-gray-200 rounded-full h-2.5 dark:bg-gray-700\">\n              <div \n                className=\"bg-blue-600 h-2.5 rounded-full\" \n                style={{ width: `${loadingProgress}%` }}\n              ></div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":22545},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useLocationTracker.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { findPathIntersections, calculatePathLength, calculateClaimedArea, calculatePathArea, calculateDistance, type PathPoint } from \"@shared/utils/geometry\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { User, UserPath } from \"@shared/schema\";\n\nexport interface LocationData {\n  position: GeolocationPosition | null;\n  accuracy: number | null;\n  isTracking: boolean;\n  error: string | null;\n  locationHistory: PathPoint[];\n  isCircleComplete: boolean;\n  circleCenter: {lat: number, lng: number} | null;\n  currentPath: UserPath | null;\n  totalPathLength: number;\n  currentPathArea: number;\n}\n\ninterface UseLocationTrackerProps {\n  user: User;\n}\n\nexport function useLocationTracker({ user }: UseLocationTrackerProps) {\n  const [position, setPosition] = useState<GeolocationPosition | null>(null);\n  const [accuracy, setAccuracy] = useState<number | null>(null);\n  const [isTracking, setIsTracking] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [locationHistory, setLocationHistory] = useState<PathPoint[]>([]);\n  const [isCircleComplete, setIsCircleComplete] = useState(false);\n  const [circleCenter, setCircleCenter] = useState<{lat: number, lng: number} | null>(null);\n  const [currentPath, setCurrentPath] = useState<UserPath | null>(null);\n  const [totalPathLength, setTotalPathLength] = useState(0);\n  const [currentPathArea, setCurrentPathArea] = useState(0);\n  const [lastSaveTime, setLastSaveTime] = useState<number | null>(null);\n  const watchIdRef = useRef<number | null>(null);\n  const queryClient = useQueryClient();\n\n  // Path tracking parameters\n  const CIRCLE_RADIUS = 10; // 10 meters\n  const CIRCLE_THRESHOLD = 0.8; // 80% of points should be within circle\n  const MIN_POINTS_FOR_CIRCLE = 20; // Minimum points to detect a circle\n  const PATH_WIDTH = 10; // Path width in meters\n  const MIN_DISTANCE_FOR_NEW_POINT = 2; // Minimum distance between points in meters\n\n  // Get active user path\n  const { data: activePathData } = useQuery({\n    queryKey: [\"/api/user-paths/active\", user.id],\n    enabled: !!user.id,\n  });\n\n  // Create new path mutation\n  const createPathMutation = useMutation({\n    mutationFn: (pathData: any) => \n      fetch('/api/user-paths', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(pathData)\n      }).then(res => res.json()),\n    onSuccess: (response: any) => {\n      setCurrentPath(response.userPath);\n      queryClient.invalidateQueries({ queryKey: [\"/api/user-paths\"] });\n    },\n  });\n\n  // Update path mutation\n  const updatePathMutation = useMutation({\n    mutationFn: ({ pathId, updates }: { pathId: string; updates: any }) => \n      fetch(`/api/user-paths/${pathId}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(updates)\n      }).then(res => res.json()),\n    onSuccess: (response: any) => {\n      setCurrentPath(response.userPath);\n      queryClient.invalidateQueries({ queryKey: [\"/api/user-paths\"] });\n    },\n  });\n\n  // Create completed circle mutation\n  const createCircleMutation = useMutation({\n    mutationFn: (circleData: any) => \n      fetch('/api/completed-circles', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(circleData)\n      }).then(res => res.json()),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/completed-circles\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n    },\n  });\n\n  // Calculate distance between two points using Haversine formula\n  const calculateDistance = (lat1: number, lng1: number, lat2: number, lng2: number): number => {\n    const R = 6371e3; // Earth's radius in meters\n    const φ1 = lat1 * Math.PI / 180;\n    const φ2 = lat2 * Math.PI / 180;\n    const Δφ = (lat2 - lat1) * Math.PI / 180;\n    const Δλ = (lng2 - lng1) * Math.PI / 180;\n\n    const a = Math.sin(Δφ/2) * Math.sin(Δφ/2) +\n              Math.cos(φ1) * Math.cos(φ2) *\n              Math.sin(Δλ/2) * Math.sin(Δλ/2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n\n    return R * c;\n  };\n\n  // Start new path tracking\n  const startNewPath = async () => {\n    if (!position) return;\n\n    const newPathData = {\n      userId: user.id,\n      username: user.username,\n      pathPoints: JSON.stringify([]),\n      pathLength: 0,\n      area: 0,\n      isActive: 1,\n      district: user.district,\n      city: user.city,\n      country: user.country,\n    };\n\n    createPathMutation.mutate(newPathData);\n  };\n\n  // Update user's total area for travel distance\n  const updateUserTotalAreaForTravel = async (currentArea: number) => {\n    if (!currentPath || currentArea <= 0) return;\n    \n    // Only update if area has increased significantly (avoid frequent small updates)\n    const lastSavedArea = currentPath.area || 0;\n    const areaDifference = currentArea - lastSavedArea;\n    \n    if (areaDifference >= 50) { // Update every 50 square meters of new area\n      try {\n        // Update user statistics via API call\n        await fetch(`/api/users/${user.id}`, {\n          method: 'PUT',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            totalArea: (user.totalArea || 0) + areaDifference,\n          })\n        });\n        \n        // Update the current path's saved area\n        if (currentPath) {\n          updatePathMutation.mutate({\n            pathId: currentPath.id,\n            updates: { area: currentArea }\n          });\n        }\n        \n        // Invalidate user queries to refresh the UI\n        queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      } catch (error) {\n        console.error('Failed to update user total area:', error);\n      }\n    }\n  };\n\n  // Save current path to database\n  const saveCurrentPath = async () => {\n    if (!currentPath || locationHistory.length === 0) return;\n\n    console.log('Saving path with', locationHistory.length, 'points');\n    const pathLength = calculatePathLength(locationHistory);\n    // Use the new claimed area formula: Area = (distance * 2 * r) + (π * r²)\n    const claimedArea = calculateClaimedArea(pathLength, CIRCLE_RADIUS);\n\n    const updates = {\n      pathPoints: JSON.stringify(locationHistory),\n      pathLength,\n      area: claimedArea,\n      isActive: 1,\n    };\n\n    updatePathMutation.mutate({ pathId: currentPath.id, updates });\n    setLastSaveTime(Date.now());\n  };\n\n  // Check for path intersections and create circles\n  const checkPathIntersections = async () => {\n    if (locationHistory.length < 4) return;\n\n    const intersections = findPathIntersections(locationHistory);\n    \n    for (const intersection of intersections) {\n      // Create completed circle\n      const circleData = {\n        userId: user.id,\n        username: user.username,\n        centerLatitude: intersection.intersection.lat,\n        centerLongitude: intersection.intersection.lng,\n        radius: CIRCLE_RADIUS,\n        area: intersection.area,\n        pathPoints: JSON.stringify(intersection.circlePoints),\n        district: user.district,\n        city: user.city,\n        country: user.country,\n      };\n\n      createCircleMutation.mutate(circleData);\n      \n      setIsCircleComplete(true);\n      setCircleCenter(intersection.intersection);\n      \n      // Reset the flag after a delay\n      setTimeout(() => {\n        setIsCircleComplete(false);\n        setCircleCenter(null);\n      }, 5000);\n    }\n  };\n\n  // Detect if the path forms a circle\n  const detectCircle = (history: Array<{lat: number, lng: number, timestamp: number}>) => {\n    if (history.length < MIN_POINTS_FOR_CIRCLE) return null;\n\n    // Find the center point (average of all points)\n    const centerLat = history.reduce((sum, point) => sum + point.lat, 0) / history.length;\n    const centerLng = history.reduce((sum, point) => sum + point.lng, 0) / history.length;\n\n    // Count points within the circle radius\n    const pointsInCircle = history.filter(point => \n      calculateDistance(point.lat, point.lng, centerLat, centerLng) <= CIRCLE_RADIUS\n    ).length;\n\n    const circleRatio = pointsInCircle / history.length;\n\n    if (circleRatio >= CIRCLE_THRESHOLD) {\n      return { lat: centerLat, lng: centerLng };\n    }\n\n    return null;\n  };\n\n  useEffect(() => {\n    if (!navigator.geolocation) {\n      setError(\"Geolocation is not supported by this browser\");\n      return;\n    }\n\n    const options: PositionOptions = {\n      enableHighAccuracy: true,\n      timeout: 15000, // Increased timeout for better accuracy\n      maximumAge: 0, // Don't use cached position - always get fresh GPS\n    };\n\n    const handleSuccess = (newPosition: GeolocationPosition) => {\n      setPosition(newPosition);\n      setAccuracy(newPosition.coords.accuracy);\n      setIsTracking(true);\n\n      if (newPosition.coords.accuracy > 20) {\n        setError(`GPS accuracy is poor (${Math.round(newPosition.coords.accuracy)} meters). Move to an open area for better accuracy.`);\n      } else {\n        setError(null);\n      }\n\n      const newPoint: PathPoint = {\n        lat: newPosition.coords.latitude,\n        lng: newPosition.coords.longitude,\n        timestamp: Date.now(),\n        accuracy: newPosition.coords.accuracy\n      };\n\n      // Only add point if it's far enough from the last point\n      setLocationHistory(prev => {\n        const lastPoint = prev[prev.length - 1];\n        if (lastPoint && calculateDistance(lastPoint, newPoint) < MIN_DISTANCE_FOR_NEW_POINT) {\n          return prev; // Skip this point\n        }\n\n        const updated = [...prev, newPoint];\n        \n        // Update path length and area using the new claimed area formula\n        const pathLength = calculatePathLength(updated);\n        // Use the formula: Area = (distance * 2 * r) + (π * r²) where r = 10m\n        const claimedArea = calculateClaimedArea(pathLength, CIRCLE_RADIUS);\n        setTotalPathLength(pathLength);\n        setCurrentPathArea(claimedArea);\n        \n        // Update user's total area in real-time based on travel distance\n        if (claimedArea > currentPathArea) {\n          updateUserTotalAreaForTravel(claimedArea);\n        }\n        \n        // Check for path intersections\n        checkPathIntersections();\n        \n        // Save to database more frequently (every 5 points instead of 10)\n        if (updated.length % 5 === 0 && currentPath) {\n          saveCurrentPath();\n        }\n        \n        // Also save every 30 seconds regardless of point count\n        if (Date.now() - (lastSaveTime || 0) > 30000 && currentPath) {\n          saveCurrentPath();\n          setLastSaveTime(Date.now());\n        }\n        \n        return updated;\n      });\n    };\n\n    const handleError = (error: GeolocationPositionError) => {\n      setIsTracking(false);\n      \n      switch (error.code) {\n        case error.PERMISSION_DENIED:\n          setError(\"Location access denied. Please enable GPS permissions.\");\n          break;\n        case error.POSITION_UNAVAILABLE:\n          setError(\"Location information unavailable. Please check your GPS.\");\n          break;\n        case error.TIMEOUT:\n          setError(\"Location request timed out. Please try again.\");\n          break;\n        default:\n          setError(\"An unknown error occurred while retrieving location.\");\n          break;\n      }\n    };\n\n    // Start watching position\n    watchIdRef.current = navigator.geolocation.watchPosition(\n      handleSuccess,\n      handleError,\n      options\n    );\n\n    // Cleanup function\n    return () => {\n      if (watchIdRef.current !== null) {\n        navigator.geolocation.clearWatch(watchIdRef.current);\n        watchIdRef.current = null;\n      }\n    };\n  }, []);\n\n  // Manual refresh function with high accuracy\n  const refreshLocation = () => {\n    if (!navigator.geolocation) {\n      setError(\"Geolocation is not supported by this browser\");\n      return;\n    }\n\n    setError(null);\n    console.log('Manually refreshing GPS location...');\n    \n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        // Only accept positions with good accuracy (less than 20 meters)\n        if (position.coords.accuracy > 20) {\n          console.log('Manual refresh - GPS accuracy too poor:', position.coords.accuracy, 'meters');\n          setError(\"GPS accuracy is too poor. Please move to an open area or wait for better signal.\");\n          return;\n        }\n\n        console.log('Manual GPS refresh successful:', {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude,\n          accuracy: position.coords.accuracy\n        });\n\n        setPosition(position);\n        setAccuracy(position.coords.accuracy);\n        setIsTracking(true);\n        setError(null);\n      },\n      (error) => {\n        setIsTracking(false);\n        switch (error.code) {\n          case error.PERMISSION_DENIED:\n            setError(\"Location access denied. Please enable GPS permissions.\");\n            break;\n          case error.POSITION_UNAVAILABLE:\n            setError(\"Location information unavailable. Please check your GPS.\");\n            break;\n          case error.TIMEOUT:\n            setError(\"Location request timed out. Please try again.\");\n            break;\n          default:\n            setError(\"An unknown error occurred while retrieving location.\");\n            break;\n        }\n      },\n      {\n        enableHighAccuracy: true,\n        timeout: 20000, // Longer timeout for manual refresh\n        maximumAge: 0, // Don't use cached position for manual refresh\n      }\n    );\n  };\n\n  // Clear location history\n  const clearHistory = () => {\n    setLocationHistory([]);\n    setIsCircleComplete(false);\n    setCircleCenter(null);\n  };\n\n  // Initialize path tracking when user starts tracking\n  useEffect(() => {\n    if (isTracking && !currentPath && position) {\n      startNewPath();\n    }\n  }, [isTracking, currentPath, position]);\n\n  // Load active path on component mount and restore location history\n  useEffect(() => {\n    if (activePathData && typeof activePathData === 'object' && 'activePath' in activePathData) {\n      const activePath = (activePathData as any).activePath;\n      if (activePath) {\n        console.log('Loading saved path:', activePath);\n        setCurrentPath(activePath);\n        if (activePath.pathPoints) {\n          try {\n            const savedPoints = JSON.parse(activePath.pathPoints);\n            console.log('Restoring path points:', savedPoints.length, 'points');\n            setLocationHistory(savedPoints);\n            setTotalPathLength(activePath.pathLength || 0);\n            setCurrentPathArea(activePath.area || 0);\n          } catch (error) {\n            console.error('Failed to parse saved path points:', error);\n          }\n        }\n      }\n    }\n  }, [activePathData]);\n\n  // Auto-save before page unload to prevent data loss\n  useEffect(() => {\n    const handleBeforeUnload = () => {\n      if (currentPath && locationHistory.length > 0) {\n        console.log('Page unloading, saving current path...');\n        // Use fetch with keepalive for better reliability than sendBeacon\n        fetch(`/api/user-paths/${currentPath.id}`, {\n          method: 'PUT',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            pathPoints: JSON.stringify(locationHistory),\n            pathLength: calculatePathLength(locationHistory),\n            area: calculatePathArea(calculatePathLength(locationHistory), PATH_WIDTH),\n            isActive: 1,\n          }),\n          keepalive: true\n        }).catch(error => {\n          console.error('Failed to save path on page unload:', error);\n        });\n      }\n    };\n\n    // Also save when visibility changes (tab switching)\n    const handleVisibilityChange = () => {\n      if (document.visibilityState === 'hidden' && currentPath && locationHistory.length > 0) {\n        saveCurrentPath();\n      }\n    };\n\n    window.addEventListener('beforeunload', handleBeforeUnload);\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    \n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n    };\n  }, [currentPath, locationHistory]);\n\n  return {\n    position,\n    accuracy,\n    isTracking,\n    error,\n    locationHistory,\n    isCircleComplete,\n    circleCenter,\n    currentPath,\n    totalPathLength,\n    currentPathArea,\n    refreshLocation,\n    clearHistory,\n    startNewPath,\n    saveCurrentPath,\n  };\n}\n","size_bytes":16691},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/home.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport type { User } from \"@shared/schema\";\nimport MapView from \"@/components/MapView\";\nimport AreaStats from \"@/components/AreaStats\";\nimport Leaderboard from \"@/components/Leaderboard\";\nimport { useLocationTracker } from \"@/hooks/useLocationTracker\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { MapPin, Users, BarChart3 } from \"lucide-react\";\n\ninterface HomeProps {\n  user: User;\n  onLogout: () => void;\n}\n\nexport default function Home({ user, onLogout }: HomeProps) {\n  const [showLeaderboard, setShowLeaderboard] = useState(false);\n  const [showStats, setShowStats] = useState(false);\n  const { position, accuracy, isTracking, error, locationHistory, isCircleComplete, circleCenter, currentPath, totalPathLength, currentPathArea, clearHistory, refreshLocation, startNewPath, saveCurrentPath } = useLocationTracker({ user });\n  const { toast } = useToast();\n\n  // Debug location tracking\n  useEffect(() => {\n    console.log('Location tracking status:', {\n      position: position ? {\n        lat: position.coords.latitude,\n        lng: position.coords.longitude,\n        accuracy: position.coords.accuracy\n      } : null,\n      isTracking,\n      error,\n      locationHistoryLength: locationHistory.length\n    });\n  }, [position, isTracking, error, locationHistory.length]);\n\n  useEffect(() => {\n    if (error) {\n      toast({\n        title: \"GPS Error\",\n        description: error,\n        variant: \"destructive\",\n      });\n    }\n  }, [error, toast]);\n\n  useEffect(() => {\n    if (isCircleComplete && circleCenter) {\n      toast({\n        title: \"Circle Completed! 🎉\",\n        description: \"You've successfully completed a 10m circle! Your achievement has been saved.\",\n        variant: \"default\",\n      });\n    }\n  }, [isCircleComplete, circleCenter, toast]);\n\n  const handleClaimArea = async () => {\n    if (!position || !isTracking) {\n      toast({\n        title: \"GPS Required\",\n        description: \"Please enable GPS tracking to claim areas\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // This will be handled by the MapView component\n    toast({\n      title: \"Attempting Claim\",\n      description: \"Checking for overlaps...\",\n    });\n  };\n\n  return (\n    <div className=\"relative h-screen w-screen overflow-hidden\">\n      {/* Map View */}\n      <MapView \n        user={user} \n        position={position} \n        isTracking={isTracking}\n        locationHistory={locationHistory}\n        isCircleComplete={isCircleComplete}\n        circleCenter={circleCenter}\n        onClaimSuccess={(area) => {\n          toast({\n            title: \"Area Claimed!\",\n            description: `+${Math.round(area)} m² added to your territory`,\n            variant: \"default\",\n          });\n        }}\n        onClaimError={(message) => {\n          toast({\n            title: \"Claim Failed\",\n            description: message,\n            variant: \"destructive\",\n          });\n        }}\n        onCircleComplete={(center) => {\n          // This will be handled by the useEffect above\n        }}\n      />\n\n      {/* Top Stats Panel */}\n      <div className=\"absolute top-4 left-4 right-4 z-20\">\n        <div className=\"bg-white/90 backdrop-blur-sm rounded-2xl shadow-lg p-4 border border-white/20\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-yellow-500 rounded-full flex items-center justify-center\">\n                <svg className=\"w-5 h-5 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\" />\n                </svg>\n              </div>\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Welcome back</p>\n                <p className=\"text-lg font-bold text-gray-900\">{user.username}</p>\n              </div>\n            </div>\n            <div className=\"text-right\">\n              <p className=\"text-sm font-medium text-gray-600\">Total Area Claimed</p>\n              <p className=\"text-2xl font-bold text-blue-600\">\n                {Math.round(user.totalArea || 0).toLocaleString()} m²\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Live Stats Card */}\n      <div className=\"absolute top-24 right-4 z-20\">\n        <div className=\"bg-white/90 backdrop-blur-sm rounded-xl shadow-lg p-3 border border-white/20 min-w-[200px]\">\n          <div className=\"flex items-center space-x-2 mb-2\">\n            <div className={`w-3 h-3 rounded-full ${isTracking ? 'bg-green-500 animate-pulse' : 'bg-red-500'}`}></div>\n            <span className=\"text-sm font-medium text-gray-700\">\n              {isTracking ? 'GPS Active' : 'GPS Inactive'}\n            </span>\n          </div>\n          {accuracy && (\n            <p className=\"text-xs text-gray-600\">Accuracy: ±{Math.round(accuracy)}m</p>\n          )}\n          {locationHistory.length > 0 && (\n            <div className=\"mt-2\">\n              <p className=\"text-xs text-gray-600\">Tracked Points: {locationHistory.length}</p>\n              {isCircleComplete && (\n                <p className=\"text-xs text-green-600 font-medium\">✓ Circle Completed!</p>\n              )}\n            </div>\n          )}\n          {locationHistory.length > 0 && (\n            <button\n              onClick={clearHistory}\n              className=\"mt-2 w-full text-xs bg-red-100 text-red-700 px-2 py-1 rounded hover:bg-red-200 transition-colors\"\n            >\n              Clear History\n            </button>\n          )}\n          <button\n            onClick={refreshLocation}\n            className=\"mt-2 w-full text-xs bg-blue-100 text-blue-700 px-2 py-1 rounded hover:bg-blue-200 transition-colors\"\n          >\n            Refresh GPS\n          </button>\n        </div>\n      </div>\n\n      {/* Bottom Action Buttons */}\n      <div className=\"absolute bottom-4 left-4 right-4 z-20\">\n        <div className=\"flex space-x-3\">\n          <button\n            onClick={() => setShowStats(true)}\n            className=\"flex-1 bg-white/90 backdrop-blur-sm rounded-xl shadow-lg p-4 border border-white/20 hover:bg-white/95 transition-all\"\n          >\n            <div className=\"flex items-center justify-center space-x-2\">\n              <BarChart3 className=\"w-5 h-5 text-blue-600\" />\n              <span className=\"font-medium text-gray-900\">Statistics</span>\n            </div>\n          </button>\n          \n          <button\n            onClick={() => setShowLeaderboard(true)}\n            className=\"flex-1 bg-white/90 backdrop-blur-sm rounded-xl shadow-lg p-4 border border-white/20 hover:bg-white/95 transition-all\"\n          >\n            <div className=\"flex items-center justify-center space-x-2\">\n              <Users className=\"w-5 h-5 text-green-600\" />\n              <span className=\"font-medium text-gray-900\">Leaderboard</span>\n            </div>\n          </button>\n        </div>\n      </div>\n\n      {/* Modals */}\n      {showStats && (\n        <AreaStats user={user} onClose={() => setShowStats(false)} />\n      )}\n      \n      {showLeaderboard && (\n        <Leaderboard onClose={() => setShowLeaderboard(false)} />\n      )}\n    </div>\n  );\n}\n","size_bytes":7378},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormMessage } from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { MapPin } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { User } from \"@shared/schema\";\n\nconst loginSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\").optional().or(z.literal(\"\")),\n  username: z.string().min(1, \"Username is required\"),\n  isAnonymous: z.boolean().default(false),\n});\n\ntype LoginForm = z.infer<typeof loginSchema>;\n\ninterface LoginProps {\n  onLogin: (user: User) => void;\n}\n\nexport default function Login({ onLogin }: LoginProps) {\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  const form = useForm<LoginForm>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      username: \"\",\n      isAnonymous: false,\n    },\n  });\n\n  const handleLogin = async (data: LoginForm) => {\n    setIsLoading(true);\n    try {\n      const response = await apiRequest('POST', '/api/auth/login', {\n        email: data.email || undefined,\n        username: data.username,\n        isAnonymous: data.isAnonymous,\n      });\n      \n      const result = await response.json();\n      onLogin(result.user);\n      \n      toast({\n        title: \"Welcome to Territory Walker!\",\n        description: \"Start exploring and claiming your territory\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Login Failed\",\n        description: \"Please try again\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleAnonymousLogin = () => {\n    const username = `Explorer${Math.floor(Math.random() * 10000)}`;\n    form.setValue('username', username);\n    form.setValue('isAnonymous', true);\n    form.setValue('email', '');\n    handleLogin({ username, isAnonymous: true, email: '' });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-100 to-green-100 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-sm\">\n        <CardHeader className=\"text-center\">\n          <div className=\"w-16 h-16 bg-blue-600 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n            <MapPin className=\"w-8 h-8 text-white\" />\n          </div>\n          <CardTitle className=\"text-2xl font-bold text-gray-900\">Territory Walker</CardTitle>\n          <p className=\"text-gray-600 mt-2\">Claim the world, one step at a time</p>\n        </CardHeader>\n        \n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(handleLogin)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        type=\"email\"\n                        placeholder=\"Email address (optional)\"\n                        className=\"px-4 py-3 rounded-xl focus:ring-2 focus:ring-blue-600 focus:border-transparent\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"username\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        placeholder=\"Choose your username\"\n                        className=\"px-4 py-3 rounded-xl focus:ring-2 focus:ring-blue-600 focus:border-transparent\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <Button\n                type=\"submit\"\n                disabled={isLoading}\n                className=\"w-full bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 px-4 rounded-xl transition-colors\"\n              >\n                {isLoading ? \"Starting Adventure...\" : \"Start Playing\"}\n              </Button>\n            </form>\n          </Form>\n\n          <div className=\"mt-6 pt-6 border-t border-gray-100\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={handleAnonymousLogin}\n              disabled={isLoading}\n              className=\"w-full bg-gray-100 hover:bg-gray-200 text-gray-700 font-medium py-3 px-4 rounded-xl transition-colors\"\n            >\n              Play as Guest\n            </Button>\n            <p className=\"text-center text-sm text-gray-500 mt-4\">\n              Join thousands of territory explorers worldwide!\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":5255},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/services/api.ts":{"content":"import { apiRequest } from \"@/lib/queryClient\";\nimport type { User, Claim, InsertClaim } from \"@shared/schema\";\n\nexport interface ClaimResponse {\n  claim: Claim;\n}\n\nexport interface ClaimsResponse {\n  claims: Claim[];\n}\n\nexport interface LeaderboardResponse {\n  leaderboard: User[];\n}\n\nexport interface RankResponse {\n  rank: number;\n}\n\nexport class ApiService {\n  // Claim operations\n  async saveClaim(claimData: InsertClaim): Promise<ClaimResponse> {\n    const response = await apiRequest('POST', '/api/claims', claimData);\n    return response.json();\n  }\n\n  async getClaims(): Promise<ClaimsResponse> {\n    const response = await apiRequest('GET', '/api/claims');\n    return response.json();\n  }\n\n  async getUserClaims(userId: string): Promise<ClaimsResponse> {\n    const response = await apiRequest('GET', `/api/claims/user/${userId}`);\n    return response.json();\n  }\n\n  // Leaderboard operations\n  async getLeaderboard(scope: 'district' | 'city' | 'country', location: string): Promise<LeaderboardResponse> {\n    const encodedLocation = encodeURIComponent(location);\n    const response = await apiRequest('GET', `/api/leaderboard/${scope}/${encodedLocation}`);\n    return response.json();\n  }\n\n  async getUserRank(userId: string, scope: 'district' | 'city' | 'country', location: string): Promise<RankResponse> {\n    const encodedLocation = encodeURIComponent(location);\n    const response = await apiRequest('GET', `/api/leaderboard/${scope}/${encodedLocation}/rank/${userId}`);\n    return response.json();\n  }\n\n  // User operations\n  async getUser(userId: string): Promise<{ user: User }> {\n    const response = await apiRequest('GET', `/api/users/${userId}`);\n    return response.json();\n  }\n\n  async updateUser(userId: string, updates: Partial<User>): Promise<{ user: User }> {\n    const response = await apiRequest('PUT', `/api/users/${userId}`, updates);\n    return response.json();\n  }\n\n  // Authentication\n  async login(email: string | undefined, username: string, isAnonymous: boolean): Promise<{ user: User }> {\n    const response = await apiRequest('POST', '/api/auth/login', {\n      email,\n      username,\n      isAnonymous,\n    });\n    return response.json();\n  }\n}\n\nexport const api = new ApiService();\n\n// Export individual functions for convenience\nexport const saveClaim = (claimData: InsertClaim) => api.saveClaim(claimData);\nexport const getClaims = () => api.getClaims();\nexport const getUserClaims = (userId: string) => api.getUserClaims(userId);\nexport const getLeaderboard = (scope: 'district' | 'city' | 'country', location: string) => \n  api.getLeaderboard(scope, location);\nexport const getUserRank = (userId: string, scope: 'district' | 'city' | 'country', location: string) => \n  api.getUserRank(userId, scope, location);\n\nexport async function getCompletedCircles() {\n  return apiRequest('GET', '/api/completed-circles');\n}\n\nexport async function getUserPathsByUsername(username: string) {\n  return apiRequest('GET', `/api/user-paths/username/${encodeURIComponent(username)}`);\n}\n\nexport async function getUserPaths(userId: string) {\n  return apiRequest('GET', `/api/user-paths/user/${userId}`);\n}\n\nexport async function getCompletedCirclesByUser(userId: string) {\n  return apiRequest('GET', `/api/completed-circles/user/${userId}`);\n}\n\nexport async function createCompletedCircle(completedCircleData: any) {\n  return apiRequest('POST', '/api/completed-circles', completedCircleData);\n}\n","size_bytes":3422},"client/src/services/supabase.ts":{"content":"// Note: This file provides the structure for Supabase integration\n// but uses the existing Express backend instead of direct Supabase client\n\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { User, InsertUser } from \"@shared/schema\";\n\nexport interface AuthResponse {\n  user: User | null;\n  error: string | null;\n}\n\nexport class SupabaseService {\n  async signInWithEmail(email: string, username: string): Promise<AuthResponse> {\n    try {\n      const response = await apiRequest('POST', '/api/auth/login', {\n        email,\n        username,\n        isAnonymous: false,\n      });\n      const data = await response.json();\n      return { user: data.user, error: null };\n    } catch (error) {\n      return { \n        user: null, \n        error: error instanceof Error ? error.message : 'Authentication failed' \n      };\n    }\n  }\n\n  async signInAnonymously(username: string): Promise<AuthResponse> {\n    try {\n      const response = await apiRequest('POST', '/api/auth/login', {\n        username,\n        isAnonymous: true,\n      });\n      const data = await response.json();\n      return { user: data.user, error: null };\n    } catch (error) {\n      return { \n        user: null, \n        error: error instanceof Error ? error.message : 'Anonymous authentication failed' \n      };\n    }\n  }\n\n  async getCurrentUser(): Promise<User | null> {\n    // Check localStorage for current user session\n    const savedUser = localStorage.getItem('territoryWalkerUser');\n    if (savedUser) {\n      try {\n        return JSON.parse(savedUser);\n      } catch {\n        localStorage.removeItem('territoryWalkerUser');\n      }\n    }\n    return null;\n  }\n\n  async signOut(): Promise<void> {\n    localStorage.removeItem('territoryWalkerUser');\n  }\n\n  // Helper method to check if user is authenticated\n  isAuthenticated(): boolean {\n    return !!localStorage.getItem('territoryWalkerUser');\n  }\n\n  // Helper method to get stored user\n  getStoredUser(): User | null {\n    const savedUser = localStorage.getItem('territoryWalkerUser');\n    if (savedUser) {\n      try {\n        return JSON.parse(savedUser);\n      } catch {\n        localStorage.removeItem('territoryWalkerUser');\n      }\n    }\n    return null;\n  }\n}\n\nexport const supabase = new SupabaseService();\n","size_bytes":2253},"client/src/utils/ClaimManager.ts":{"content":"// Utility functions for managing territory claims and overlap detection\n\nexport interface ClaimCircle {\n  lat: number;\n  lng: number;\n  radius: number;\n}\n\n/**\n * Check if two circles overlap using the Haversine formula\n * @param circle1 First circle with lat, lng, radius\n * @param circle2 Second circle with lat, lng, radius\n * @returns true if circles overlap, false otherwise\n */\nexport function checkOverlap(circle1: ClaimCircle, circle2: ClaimCircle): boolean {\n  const distance = calculateDistance(circle1.lat, circle1.lng, circle2.lat, circle2.lng);\n  const minDistance = circle1.radius + circle2.radius;\n  \n  return distance < minDistance;\n}\n\n/**\n * Calculate the distance between two points using the Haversine formula\n * @param lat1 Latitude of first point\n * @param lng1 Longitude of first point\n * @param lat2 Latitude of second point\n * @param lng2 Longitude of second point\n * @returns Distance in meters\n */\nexport function calculateDistance(lat1: number, lng1: number, lat2: number, lng2: number): number {\n  const R = 6371000; // Earth's radius in meters\n  const dLat = toRadians(lat2 - lat1);\n  const dLng = toRadians(lng2 - lng1);\n  \n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.cos(toRadians(lat1)) * Math.cos(toRadians(lat2)) *\n    Math.sin(dLng / 2) * Math.sin(dLng / 2);\n  \n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  \n  return R * c;\n}\n\n/**\n * Convert degrees to radians\n * @param degrees Degrees to convert\n * @returns Radians\n */\nfunction toRadians(degrees: number): number {\n  return degrees * (Math.PI / 180);\n}\n\n/**\n * Calculate the area of a circle\n * @param radius Radius in meters\n * @returns Area in square meters\n */\nexport function calculateCircleArea(radius: number): number {\n  return Math.PI * radius * radius;\n}\n\n/**\n * Check if a claim is valid (doesn't overlap with existing claims)\n * @param newClaim The new claim to check\n * @param existingClaims Array of existing claims\n * @returns Object with validity status and message\n */\nexport function validateClaim(\n  newClaim: ClaimCircle, \n  existingClaims: ClaimCircle[]\n): { isValid: boolean; message: string } {\n  for (const existingClaim of existingClaims) {\n    if (checkOverlap(newClaim, existingClaim)) {\n      const distance = calculateDistance(\n        newClaim.lat, newClaim.lng, \n        existingClaim.lat, existingClaim.lng\n      );\n      \n      return {\n        isValid: false,\n        message: `This area overlaps with an existing claim (${Math.round(distance)}m away)`\n      };\n    }\n  }\n  \n  return {\n    isValid: true,\n    message: \"Area is available for claiming\"\n  };\n}\n\n/**\n * Get the optimal claiming radius based on GPS accuracy\n * @param accuracy GPS accuracy in meters\n * @returns Recommended radius in meters\n */\nexport function getOptimalRadius(accuracy: number): number {\n  // Base radius is 100m, but adjust based on GPS accuracy\n  const baseRadius = 100;\n  \n  if (accuracy <= 5) {\n    return baseRadius; // High accuracy, use full radius\n  } else if (accuracy <= 10) {\n    return Math.max(baseRadius * 0.8, 50); // Good accuracy, slightly reduce\n  } else if (accuracy <= 20) {\n    return Math.max(baseRadius * 0.6, 30); // Fair accuracy, reduce more\n  } else {\n    return Math.max(baseRadius * 0.4, 20); // Poor accuracy, minimum radius\n  }\n}\n\n/**\n * Format area for display\n * @param area Area in square meters\n * @returns Formatted string\n */\nexport function formatArea(area: number): string {\n  if (area >= 1000000) {\n    return `${(area / 1000000).toFixed(1)} km²`;\n  } else if (area >= 1000) {\n    return `${(area / 1000).toFixed(1)} k m²`;\n  } else {\n    return `${Math.round(area)} m²`;\n  }\n}\n\n/**\n * Calculate total area from multiple claims\n * @param claims Array of claims with area property\n * @returns Total area in square meters\n */\nexport function calculateTotalArea(claims: { area: number }[]): number {\n  return claims.reduce((total, claim) => total + claim.area, 0);\n}\n","size_bytes":3944},"client/src/utils/geoUtils.ts":{"content":"// Geographic utility functions for location-based operations\n\nexport interface Coordinates {\n  latitude: number;\n  longitude: number;\n}\n\nexport interface LocationInfo {\n  district?: string;\n  city?: string;\n  country?: string;\n  region?: string;\n}\n\n/**\n * Convert GPS coordinates to a simplified location identifier\n * This is a simplified version - in production you'd use a reverse geocoding service\n * @param coords GPS coordinates\n * @returns Location information object\n */\nexport function getLocationInfo(coords: Coordinates): LocationInfo {\n  // Simplified location mapping based on coordinate ranges\n  // In a real app, you'd use a service like Nominatim, Google Geocoding, etc.\n  \n  const { latitude, longitude } = coords;\n  \n  // Generate simplified district/city names based on coordinate grids\n  const districtId = Math.floor((latitude + 90) * 10) % 100;\n  const cityId = Math.floor((longitude + 180) * 10) % 100;\n  \n  return {\n    district: `District_${districtId.toString().padStart(2, '0')}`,\n    city: `City_${cityId.toString().padStart(2, '0')}`,\n    country: getCountryFromCoords(latitude, longitude),\n    region: getRegionFromCoords(latitude, longitude),\n  };\n}\n\n/**\n * Get approximate country from coordinates\n * This is a very simplified version - real implementation would use proper country boundaries\n * @param lat Latitude\n * @param lng Longitude\n * @returns Country name\n */\nfunction getCountryFromCoords(lat: number, lng: number): string {\n  // Simplified country detection based on rough coordinate ranges\n  if (lat >= 24 && lat <= 50 && lng >= -125 && lng <= -66) {\n    return 'United States';\n  } else if (lat >= 42 && lat <= 83 && lng >= -141 && lng <= -52) {\n    return 'Canada';\n  } else if (lat >= 35 && lat <= 72 && lng >= -10 && lng <= 40) {\n    return 'Europe';\n  } else if (lat >= -55 && lat <= 37 && lng >= -20 && lng <= 55) {\n    return 'Africa';\n  } else if (lat >= -50 && lat <= 81 && lng >= 26 && lng <= 180) {\n    return 'Asia';\n  } else if (lat >= -47 && lat <= -9 && lng >= 113 && lng <= 154) {\n    return 'Australia';\n  } else {\n    return 'Unknown';\n  }\n}\n\n/**\n * Get approximate region from coordinates\n * @param lat Latitude\n * @param lng Longitude\n * @returns Region name\n */\nfunction getRegionFromCoords(lat: number, lng: number): string {\n  if (lat >= 0) {\n    return 'Northern Hemisphere';\n  } else {\n    return 'Southern Hemisphere';\n  }\n}\n\n/**\n * Check if coordinates are within a valid range\n * @param coords Coordinates to validate\n * @returns true if valid, false otherwise\n */\nexport function validateCoordinates(coords: Coordinates): boolean {\n  const { latitude, longitude } = coords;\n  return (\n    latitude >= -90 && latitude <= 90 &&\n    longitude >= -180 && longitude <= 180\n  );\n}\n\n/**\n * Format coordinates for display\n * @param coords Coordinates to format\n * @param precision Number of decimal places\n * @returns Formatted coordinate string\n */\nexport function formatCoordinates(coords: Coordinates, precision: number = 6): string {\n  const { latitude, longitude } = coords;\n  const latStr = latitude.toFixed(precision);\n  const lngStr = longitude.toFixed(precision);\n  const latDir = latitude >= 0 ? 'N' : 'S';\n  const lngDir = longitude >= 0 ? 'E' : 'W';\n  \n  return `${Math.abs(parseFloat(latStr))}°${latDir}, ${Math.abs(parseFloat(lngStr))}°${lngDir}`;\n}\n\n/**\n * Calculate the bounding box for a given center point and radius\n * @param center Center coordinates\n * @param radiusMeters Radius in meters\n * @returns Bounding box coordinates\n */\nexport function getBoundingBox(center: Coordinates, radiusMeters: number) {\n  const { latitude, longitude } = center;\n  \n  // Rough conversion: 1 degree latitude ≈ 111,000 meters\n  // 1 degree longitude ≈ 111,000 * cos(latitude) meters\n  const latOffset = radiusMeters / 111000;\n  const lngOffset = radiusMeters / (111000 * Math.cos(latitude * Math.PI / 180));\n  \n  return {\n    north: latitude + latOffset,\n    south: latitude - latOffset,\n    east: longitude + lngOffset,\n    west: longitude - lngOffset,\n  };\n}\n\n/**\n * Check if a point is within a circular area\n * @param point Point to check\n * @param center Center of the circle\n * @param radiusMeters Radius in meters\n * @returns true if point is within the circle\n */\nexport function isPointInCircle(\n  point: Coordinates, \n  center: Coordinates, \n  radiusMeters: number\n): boolean {\n  const distance = calculateDistanceBetweenPoints(point, center);\n  return distance <= radiusMeters;\n}\n\n/**\n * Calculate distance between two points using Haversine formula\n * @param point1 First point\n * @param point2 Second point\n * @returns Distance in meters\n */\nexport function calculateDistanceBetweenPoints(\n  point1: Coordinates, \n  point2: Coordinates\n): number {\n  const R = 6371000; // Earth's radius in meters\n  const lat1Rad = point1.latitude * Math.PI / 180;\n  const lat2Rad = point2.latitude * Math.PI / 180;\n  const deltaLatRad = (point2.latitude - point1.latitude) * Math.PI / 180;\n  const deltaLngRad = (point2.longitude - point1.longitude) * Math.PI / 180;\n\n  const a = Math.sin(deltaLatRad / 2) * Math.sin(deltaLatRad / 2) +\n    Math.cos(lat1Rad) * Math.cos(lat2Rad) *\n    Math.sin(deltaLngRad / 2) * Math.sin(deltaLngRad / 2);\n  \n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  \n  return R * c;\n}\n\n/**\n * Get compass bearing between two points\n * @param start Starting point\n * @param end Ending point\n * @returns Bearing in degrees (0-360)\n */\nexport function getBearing(start: Coordinates, end: Coordinates): number {\n  const lat1Rad = start.latitude * Math.PI / 180;\n  const lat2Rad = end.latitude * Math.PI / 180;\n  const deltaLngRad = (end.longitude - start.longitude) * Math.PI / 180;\n\n  const y = Math.sin(deltaLngRad) * Math.cos(lat2Rad);\n  const x = Math.cos(lat1Rad) * Math.sin(lat2Rad) -\n    Math.sin(lat1Rad) * Math.cos(lat2Rad) * Math.cos(deltaLngRad);\n\n  const bearingRad = Math.atan2(y, x);\n  const bearingDeg = (bearingRad * 180 / Math.PI + 360) % 360;\n\n  return bearingDeg;\n}\n\n/**\n * Generate a random point within a given radius from a center point\n * Useful for testing or demo purposes\n * @param center Center coordinates\n * @param maxRadiusMeters Maximum radius in meters\n * @returns Random coordinates within the radius\n */\nexport function generateRandomPointInRadius(\n  center: Coordinates, \n  maxRadiusMeters: number\n): Coordinates {\n  const radiusInDegrees = maxRadiusMeters / 111000;\n  const u = Math.random();\n  const v = Math.random();\n  \n  const w = radiusInDegrees * Math.sqrt(u);\n  const t = 2 * Math.PI * v;\n  \n  const x = w * Math.cos(t);\n  const y = w * Math.sin(t);\n  \n  return {\n    latitude: center.latitude + x,\n    longitude: center.longitude + y / Math.cos(center.latitude * Math.PI / 180),\n  };\n}\n","size_bytes":6738},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}