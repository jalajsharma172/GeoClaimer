{
	"compiler": {
		"version": "0.8.30+commit.73712a01"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"type": "constructor",
				"inputs": [
					{
						"name": "name",
						"type": "string",
						"internalType": "string"
					},
					{
						"name": "symbol",
						"type": "string",
						"internalType": "string"
					}
				],
				"stateMutability": "nonpayable"
			},
			{
				"type": "function",
				"name": "allowance",
				"inputs": [
					{
						"name": "owner",
						"type": "address",
						"internalType": "address"
					},
					{
						"name": "spender",
						"type": "address",
						"internalType": "address"
					}
				],
				"outputs": [
					{
						"name": "",
						"type": "uint256",
						"internalType": "uint256"
					}
				],
				"stateMutability": "view"
			},
			{
				"type": "function",
				"name": "approve",
				"inputs": [
					{
						"name": "spender",
						"type": "address",
						"internalType": "address"
					},
					{
						"name": "value",
						"type": "uint256",
						"internalType": "uint256"
					}
				],
				"outputs": [
					{
						"name": "",
						"type": "bool",
						"internalType": "bool"
					}
				],
				"stateMutability": "nonpayable"
			},
			{
				"type": "function",
				"name": "balanceOf",
				"inputs": [
					{
						"name": "account",
						"type": "address",
						"internalType": "address"
					}
				],
				"outputs": [
					{
						"name": "",
						"type": "uint256",
						"internalType": "uint256"
					}
				],
				"stateMutability": "view"
			},
			{
				"type": "function",
				"name": "burn",
				"inputs": [
					{
						"name": "value",
						"type": "uint256",
						"internalType": "uint256"
					}
				],
				"outputs": [],
				"stateMutability": "nonpayable"
			},
			{
				"type": "function",
				"name": "burnFrom",
				"inputs": [
					{
						"name": "account",
						"type": "address",
						"internalType": "address"
					},
					{
						"name": "value",
						"type": "uint256",
						"internalType": "uint256"
					}
				],
				"outputs": [],
				"stateMutability": "nonpayable"
			},
			{
				"type": "function",
				"name": "burnFromAccount",
				"inputs": [
					{
						"name": "from",
						"type": "address",
						"internalType": "address"
					},
					{
						"name": "amount",
						"type": "uint256",
						"internalType": "uint256"
					}
				],
				"outputs": [],
				"stateMutability": "nonpayable"
			},
			{
				"type": "function",
				"name": "decimals",
				"inputs": [],
				"outputs": [
					{
						"name": "",
						"type": "uint8",
						"internalType": "uint8"
					}
				],
				"stateMutability": "view"
			},
			{
				"type": "function",
				"name": "mint",
				"inputs": [
					{
						"name": "to",
						"type": "address",
						"internalType": "address"
					},
					{
						"name": "amount",
						"type": "uint256",
						"internalType": "uint256"
					}
				],
				"outputs": [],
				"stateMutability": "nonpayable"
			},
			{
				"type": "function",
				"name": "name",
				"inputs": [],
				"outputs": [
					{
						"name": "",
						"type": "string",
						"internalType": "string"
					}
				],
				"stateMutability": "view"
			},
			{
				"type": "function",
				"name": "owner",
				"inputs": [],
				"outputs": [
					{
						"name": "",
						"type": "address",
						"internalType": "address"
					}
				],
				"stateMutability": "view"
			},
			{
				"type": "function",
				"name": "renounceOwnership",
				"inputs": [],
				"outputs": [],
				"stateMutability": "nonpayable"
			},
			{
				"type": "function",
				"name": "symbol",
				"inputs": [],
				"outputs": [
					{
						"name": "",
						"type": "string",
						"internalType": "string"
					}
				],
				"stateMutability": "view"
			},
			{
				"type": "function",
				"name": "totalSupply",
				"inputs": [],
				"outputs": [
					{
						"name": "",
						"type": "uint256",
						"internalType": "uint256"
					}
				],
				"stateMutability": "view"
			},
			{
				"type": "function",
				"name": "transfer",
				"inputs": [
					{
						"name": "to",
						"type": "address",
						"internalType": "address"
					},
					{
						"name": "value",
						"type": "uint256",
						"internalType": "uint256"
					}
				],
				"outputs": [
					{
						"name": "",
						"type": "bool",
						"internalType": "bool"
					}
				],
				"stateMutability": "nonpayable"
			},
			{
				"type": "function",
				"name": "transferFrom",
				"inputs": [
					{
						"name": "from",
						"type": "address",
						"internalType": "address"
					},
					{
						"name": "to",
						"type": "address",
						"internalType": "address"
					},
					{
						"name": "value",
						"type": "uint256",
						"internalType": "uint256"
					}
				],
				"outputs": [
					{
						"name": "",
						"type": "bool",
						"internalType": "bool"
					}
				],
				"stateMutability": "nonpayable"
			},
			{
				"type": "function",
				"name": "transferOwnership",
				"inputs": [
					{
						"name": "newOwner",
						"type": "address",
						"internalType": "address"
					}
				],
				"outputs": [],
				"stateMutability": "nonpayable"
			},
			{
				"type": "event",
				"name": "Approval",
				"inputs": [
					{
						"name": "owner",
						"type": "address",
						"indexed": true,
						"internalType": "address"
					},
					{
						"name": "spender",
						"type": "address",
						"indexed": true,
						"internalType": "address"
					},
					{
						"name": "value",
						"type": "uint256",
						"indexed": false,
						"internalType": "uint256"
					}
				],
				"anonymous": false
			},
			{
				"type": "event",
				"name": "OwnershipTransferred",
				"inputs": [
					{
						"name": "previousOwner",
						"type": "address",
						"indexed": true,
						"internalType": "address"
					},
					{
						"name": "newOwner",
						"type": "address",
						"indexed": true,
						"internalType": "address"
					}
				],
				"anonymous": false
			},
			{
				"type": "event",
				"name": "Transfer",
				"inputs": [
					{
						"name": "from",
						"type": "address",
						"indexed": true,
						"internalType": "address"
					},
					{
						"name": "to",
						"type": "address",
						"indexed": true,
						"internalType": "address"
					},
					{
						"name": "value",
						"type": "uint256",
						"indexed": false,
						"internalType": "uint256"
					}
				],
				"anonymous": false
			},
			{
				"type": "error",
				"name": "ERC20InsufficientAllowance",
				"inputs": [
					{
						"name": "spender",
						"type": "address",
						"internalType": "address"
					},
					{
						"name": "allowance",
						"type": "uint256",
						"internalType": "uint256"
					},
					{
						"name": "needed",
						"type": "uint256",
						"internalType": "uint256"
					}
				]
			},
			{
				"type": "error",
				"name": "ERC20InsufficientBalance",
				"inputs": [
					{
						"name": "sender",
						"type": "address",
						"internalType": "address"
					},
					{
						"name": "balance",
						"type": "uint256",
						"internalType": "uint256"
					},
					{
						"name": "needed",
						"type": "uint256",
						"internalType": "uint256"
					}
				]
			},
			{
				"type": "error",
				"name": "ERC20InvalidApprover",
				"inputs": [
					{
						"name": "approver",
						"type": "address",
						"internalType": "address"
					}
				]
			},
			{
				"type": "error",
				"name": "ERC20InvalidReceiver",
				"inputs": [
					{
						"name": "receiver",
						"type": "address",
						"internalType": "address"
					}
				]
			},
			{
				"type": "error",
				"name": "ERC20InvalidSender",
				"inputs": [
					{
						"name": "sender",
						"type": "address",
						"internalType": "address"
					}
				]
			},
			{
				"type": "error",
				"name": "ERC20InvalidSpender",
				"inputs": [
					{
						"name": "spender",
						"type": "address",
						"internalType": "address"
					}
				]
			},
			{
				"type": "error",
				"name": "OwnableInvalidOwner",
				"inputs": [
					{
						"name": "owner",
						"type": "address",
						"internalType": "address"
					}
				]
			},
			{
				"type": "error",
				"name": "OwnableUnauthorizedAccount",
				"inputs": [
					{
						"name": "account",
						"type": "address",
						"internalType": "address"
					}
				]
			}
		],
		"devdoc": {
			"errors": {
				"ERC20InsufficientAllowance(address,uint256,uint256)": [
					{
						"details": "Indicates a failure with the `spender`â€™s `allowance`. Used in transfers.",
						"params": {
							"allowance": "Amount of tokens a `spender` is allowed to operate with.",
							"needed": "Minimum amount required to perform a transfer.",
							"spender": "Address that may be allowed to operate on tokens without being their owner."
						}
					}
				],
				"ERC20InsufficientBalance(address,uint256,uint256)": [
					{
						"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
						"params": {
							"balance": "Current balance for the interacting account.",
							"needed": "Minimum amount required to perform a transfer.",
							"sender": "Address whose tokens are being transferred."
						}
					}
				],
				"ERC20InvalidApprover(address)": [
					{
						"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
						"params": {
							"approver": "Address initiating an approval operation."
						}
					}
				],
				"ERC20InvalidReceiver(address)": [
					{
						"details": "Indicates a failure with the token `receiver`. Used in transfers.",
						"params": {
							"receiver": "Address to which tokens are being transferred."
						}
					}
				],
				"ERC20InvalidSender(address)": [
					{
						"details": "Indicates a failure with the token `sender`. Used in transfers.",
						"params": {
							"sender": "Address whose tokens are being transferred."
						}
					}
				],
				"ERC20InvalidSpender(address)": [
					{
						"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
						"params": {
							"spender": "Address that may be allowed to operate on tokens without being their owner."
						}
					}
				],
				"OwnableInvalidOwner(address)": [
					{
						"details": "The owner is not a valid owner account. (eg. `address(0)`)"
					}
				],
				"OwnableUnauthorizedAccount(address)": [
					{
						"details": "The caller account is not authorized to perform an operation."
					}
				]
			},
			"events": {
				"Approval(address,address,uint256)": {
					"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
				},
				"Transfer(address,address,uint256)": {
					"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
				}
			},
			"kind": "dev",
			"methods": {
				"allowance(address,address)": {
					"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
				},
				"approve(address,uint256)": {
					"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
				},
				"balanceOf(address)": {
					"details": "Returns the value of tokens owned by `account`."
				},
				"burn(uint256)": {
					"details": "Destroys a `value` amount of tokens from the caller. See {ERC20-_burn}."
				},
				"burnFrom(address,uint256)": {
					"details": "Destroys a `value` amount of tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `value`."
				},
				"burnFromAccount(address,uint256)": {
					"params": {
						"amount": "Amount of tokens to burn",
						"from": "Address whose tokens will be burned"
					}
				},
				"decimals()": {
					"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
				},
				"mint(address,uint256)": {
					"params": {
						"amount": "Amount of tokens to mint",
						"to": "Address to receive tokens"
					}
				},
				"name()": {
					"details": "Returns the name of the token."
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"symbol()": {
					"details": "Returns the symbol of the token, usually a shorter version of the name."
				},
				"totalSupply()": {
					"details": "Returns the value of tokens in existence."
				},
				"transfer(address,uint256)": {
					"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
				},
				"transferFrom(address,address,uint256)": {
					"details": "See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				}
			},
			"title": "EchoNetToken - ERC20 token where only the owner can mint and burn tokens",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"burnFromAccount(address,uint256)": {
					"notice": "Burn tokens from an account, only callable by owner"
				},
				"mint(address,uint256)": {
					"notice": "Mint tokens, only callable by owner"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"src/EchoNetToken.sol": "EchoNetToken"
		},
		"evmVersion": "prague",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb",
			"license": "MIT",
			"urls": [
				"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6",
				"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"
			]
		},
		"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
			"keccak256": "0x19fdfb0f3b89a230e7dbd1cf416f1a6b531a3ee5db4da483f946320fc74afc0e",
			"license": "MIT",
			"urls": [
				"bzz-raw://3490d794728f5bfecb46820431adaff71ba374141545ec20b650bb60353fac23",
				"dweb:/ipfs/QmPsfxjVpMcZbpE7BH93DzTpEaktESigEw4SmDzkXuJ4WR"
			]
		},
		"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
			"keccak256": "0x86b7b71a6aedefdad89b607378eeab1dcc5389b9ea7d17346d08af01d7190994",
			"license": "MIT",
			"urls": [
				"bzz-raw://1dc2db8d94a21eac8efe03adf574c419b08536409b416057a2b5b95cb772c43c",
				"dweb:/ipfs/QmZfqJCKVU1ScuX2A7s8WZdQEaikwJbDH5JBrBdKTUT4Gu"
			]
		},
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2",
			"license": "MIT",
			"urls": [
				"bzz-raw://5282825a626cfe924e504274b864a652b0023591fa66f06a067b25b51ba9b303",
				"dweb:/ipfs/QmeCfPykghhMc81VJTrHTC7sF6CRvaA1FXVq2pJhwYp1dV"
			]
		},
		"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
			"keccak256": "0x2659248df25e34000ed214b3dc8da2160bc39874c992b477d9e2b1b3283dc073",
			"license": "MIT",
			"urls": [
				"bzz-raw://c345af1b0e7ea28d1216d6a04ab28f5534a5229b9edf9ca3cd0e84950ae58d26",
				"dweb:/ipfs/QmY63jtSrYpLRe8Gj1ep2vMDCKxGNNG3hnNVKBVnrs2nmA"
			]
		},
		"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
			"keccak256": "0xd6fa4088198f04eef10c5bce8a2f4d60554b7ec4b987f684393c01bf79b94d9f",
			"license": "MIT",
			"urls": [
				"bzz-raw://f95ee0bbd4dd3ac730d066ba3e785ded4565e890dbec2fa7d3b9fe3bad9d0d6e",
				"dweb:/ipfs/QmSLr6bHkPFWT7ntj34jmwfyskpwo97T9jZUrk5sz3sdtR"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
				"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
			]
		},
		"src/EchoNetToken.sol": {
			"keccak256": "0x3c45062addd906ba2454b10afa0c2c60b6ad05f3d661678c0c3fded5dfcade5d",
			"license": "MIT",
			"urls": [
				"bzz-raw://f4d21fde963f2106fabacc39cb3fc5a95d4b6794684eeaa9c7804eaa92ed4fdf",
				"dweb:/ipfs/QmPS6WdVsXDabibzx8MAucPnBmBeH8WdK9yLxCBESAkjJn"
			]
		}
	},
	"version": 1
}